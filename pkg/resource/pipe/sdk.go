// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package pipe

import (
	"context"
	"errors"
	"fmt"
	"math"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/pipes"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/pipes/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/pipes-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.Pipe{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribePipeOutput
	resp, err = rm.sdkapi.DescribePipe(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribePipe", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "NotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.CurrentState != "" {
		ko.Status.CurrentState = aws.String(string(resp.CurrentState))
	} else {
		ko.Status.CurrentState = nil
	}
	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.DesiredState != "" {
		ko.Spec.DesiredState = aws.String(string(resp.DesiredState))
	} else {
		ko.Spec.DesiredState = nil
	}
	if resp.Enrichment != nil {
		ko.Spec.Enrichment = resp.Enrichment
	} else {
		ko.Spec.Enrichment = nil
	}
	if resp.EnrichmentParameters != nil {
		f6 := &svcapitypes.PipeEnrichmentParameters{}
		if resp.EnrichmentParameters.HttpParameters != nil {
			f6f0 := &svcapitypes.PipeEnrichmentHTTPParameters{}
			if resp.EnrichmentParameters.HttpParameters.HeaderParameters != nil {
				f6f0.HeaderParameters = aws.StringMap(resp.EnrichmentParameters.HttpParameters.HeaderParameters)
			}
			if resp.EnrichmentParameters.HttpParameters.PathParameterValues != nil {
				f6f0.PathParameterValues = aws.StringSlice(resp.EnrichmentParameters.HttpParameters.PathParameterValues)
			}
			if resp.EnrichmentParameters.HttpParameters.QueryStringParameters != nil {
				f6f0.QueryStringParameters = aws.StringMap(resp.EnrichmentParameters.HttpParameters.QueryStringParameters)
			}
			f6.HTTPParameters = f6f0
		}
		if resp.EnrichmentParameters.InputTemplate != nil {
			f6.InputTemplate = resp.EnrichmentParameters.InputTemplate
		}
		ko.Spec.EnrichmentParameters = f6
	} else {
		ko.Spec.EnrichmentParameters = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.RoleArn != nil {
		ko.Spec.RoleARN = resp.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.Source != nil {
		ko.Spec.Source = resp.Source
	} else {
		ko.Spec.Source = nil
	}
	if resp.SourceParameters != nil {
		f13 := &svcapitypes.PipeSourceParameters{}
		if resp.SourceParameters.ActiveMQBrokerParameters != nil {
			f13f0 := &svcapitypes.PipeSourceActiveMQBrokerParameters{}
			if resp.SourceParameters.ActiveMQBrokerParameters.BatchSize != nil {
				batchSizeCopy := int64(*resp.SourceParameters.ActiveMQBrokerParameters.BatchSize)
				f13f0.BatchSize = &batchSizeCopy
			}
			if resp.SourceParameters.ActiveMQBrokerParameters.Credentials != nil {
				f13f0f1 := &svcapitypes.MQBrokerAccessCredentials{}
				switch resp.SourceParameters.ActiveMQBrokerParameters.Credentials.(type) {
				case *svcsdktypes.MQBrokerAccessCredentialsMemberBasicAuth:
					f13f0f1f0 := resp.SourceParameters.ActiveMQBrokerParameters.Credentials.(*svcsdktypes.MQBrokerAccessCredentialsMemberBasicAuth)
					if f13f0f1f0 != nil {
						f13f0f1.BasicAuth = &f13f0f1f0.Value
					}
				}
				f13f0.Credentials = f13f0f1
			}
			if resp.SourceParameters.ActiveMQBrokerParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy := int64(*resp.SourceParameters.ActiveMQBrokerParameters.MaximumBatchingWindowInSeconds)
				f13f0.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if resp.SourceParameters.ActiveMQBrokerParameters.QueueName != nil {
				f13f0.QueueName = resp.SourceParameters.ActiveMQBrokerParameters.QueueName
			}
			f13.ActiveMQBrokerParameters = f13f0
		}
		if resp.SourceParameters.DynamoDBStreamParameters != nil {
			f13f1 := &svcapitypes.PipeSourceDynamoDBStreamParameters{}
			if resp.SourceParameters.DynamoDBStreamParameters.BatchSize != nil {
				batchSizeCopy := int64(*resp.SourceParameters.DynamoDBStreamParameters.BatchSize)
				f13f1.BatchSize = &batchSizeCopy
			}
			if resp.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig != nil {
				f13f1f1 := &svcapitypes.DeadLetterConfig{}
				if resp.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig.Arn != nil {
					f13f1f1.ARN = resp.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig.Arn
				}
				f13f1.DeadLetterConfig = f13f1f1
			}
			if resp.SourceParameters.DynamoDBStreamParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy := int64(*resp.SourceParameters.DynamoDBStreamParameters.MaximumBatchingWindowInSeconds)
				f13f1.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if resp.SourceParameters.DynamoDBStreamParameters.MaximumRecordAgeInSeconds != nil {
				maximumRecordAgeInSecondsCopy := int64(*resp.SourceParameters.DynamoDBStreamParameters.MaximumRecordAgeInSeconds)
				f13f1.MaximumRecordAgeInSeconds = &maximumRecordAgeInSecondsCopy
			}
			if resp.SourceParameters.DynamoDBStreamParameters.MaximumRetryAttempts != nil {
				maximumRetryAttemptsCopy := int64(*resp.SourceParameters.DynamoDBStreamParameters.MaximumRetryAttempts)
				f13f1.MaximumRetryAttempts = &maximumRetryAttemptsCopy
			}
			if resp.SourceParameters.DynamoDBStreamParameters.OnPartialBatchItemFailure != "" {
				f13f1.OnPartialBatchItemFailure = aws.String(string(resp.SourceParameters.DynamoDBStreamParameters.OnPartialBatchItemFailure))
			}
			if resp.SourceParameters.DynamoDBStreamParameters.ParallelizationFactor != nil {
				parallelizationFactorCopy := int64(*resp.SourceParameters.DynamoDBStreamParameters.ParallelizationFactor)
				f13f1.ParallelizationFactor = &parallelizationFactorCopy
			}
			if resp.SourceParameters.DynamoDBStreamParameters.StartingPosition != "" {
				f13f1.StartingPosition = aws.String(string(resp.SourceParameters.DynamoDBStreamParameters.StartingPosition))
			}
			f13.DynamoDBStreamParameters = f13f1
		}
		if resp.SourceParameters.FilterCriteria != nil {
			f13f2 := &svcapitypes.FilterCriteria{}
			if resp.SourceParameters.FilterCriteria.Filters != nil {
				f13f2f0 := []*svcapitypes.Filter{}
				for _, f13f2f0iter := range resp.SourceParameters.FilterCriteria.Filters {
					f13f2f0elem := &svcapitypes.Filter{}
					if f13f2f0iter.Pattern != nil {
						f13f2f0elem.Pattern = f13f2f0iter.Pattern
					}
					f13f2f0 = append(f13f2f0, f13f2f0elem)
				}
				f13f2.Filters = f13f2f0
			}
			f13.FilterCriteria = f13f2
		}
		if resp.SourceParameters.KinesisStreamParameters != nil {
			f13f3 := &svcapitypes.PipeSourceKinesisStreamParameters{}
			if resp.SourceParameters.KinesisStreamParameters.BatchSize != nil {
				batchSizeCopy := int64(*resp.SourceParameters.KinesisStreamParameters.BatchSize)
				f13f3.BatchSize = &batchSizeCopy
			}
			if resp.SourceParameters.KinesisStreamParameters.DeadLetterConfig != nil {
				f13f3f1 := &svcapitypes.DeadLetterConfig{}
				if resp.SourceParameters.KinesisStreamParameters.DeadLetterConfig.Arn != nil {
					f13f3f1.ARN = resp.SourceParameters.KinesisStreamParameters.DeadLetterConfig.Arn
				}
				f13f3.DeadLetterConfig = f13f3f1
			}
			if resp.SourceParameters.KinesisStreamParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy := int64(*resp.SourceParameters.KinesisStreamParameters.MaximumBatchingWindowInSeconds)
				f13f3.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if resp.SourceParameters.KinesisStreamParameters.MaximumRecordAgeInSeconds != nil {
				maximumRecordAgeInSecondsCopy := int64(*resp.SourceParameters.KinesisStreamParameters.MaximumRecordAgeInSeconds)
				f13f3.MaximumRecordAgeInSeconds = &maximumRecordAgeInSecondsCopy
			}
			if resp.SourceParameters.KinesisStreamParameters.MaximumRetryAttempts != nil {
				maximumRetryAttemptsCopy := int64(*resp.SourceParameters.KinesisStreamParameters.MaximumRetryAttempts)
				f13f3.MaximumRetryAttempts = &maximumRetryAttemptsCopy
			}
			if resp.SourceParameters.KinesisStreamParameters.OnPartialBatchItemFailure != "" {
				f13f3.OnPartialBatchItemFailure = aws.String(string(resp.SourceParameters.KinesisStreamParameters.OnPartialBatchItemFailure))
			}
			if resp.SourceParameters.KinesisStreamParameters.ParallelizationFactor != nil {
				parallelizationFactorCopy := int64(*resp.SourceParameters.KinesisStreamParameters.ParallelizationFactor)
				f13f3.ParallelizationFactor = &parallelizationFactorCopy
			}
			if resp.SourceParameters.KinesisStreamParameters.StartingPosition != "" {
				f13f3.StartingPosition = aws.String(string(resp.SourceParameters.KinesisStreamParameters.StartingPosition))
			}
			if resp.SourceParameters.KinesisStreamParameters.StartingPositionTimestamp != nil {
				f13f3.StartingPositionTimestamp = &metav1.Time{*resp.SourceParameters.KinesisStreamParameters.StartingPositionTimestamp}
			}
			f13.KinesisStreamParameters = f13f3
		}
		if resp.SourceParameters.ManagedStreamingKafkaParameters != nil {
			f13f4 := &svcapitypes.PipeSourceManagedStreamingKafkaParameters{}
			if resp.SourceParameters.ManagedStreamingKafkaParameters.BatchSize != nil {
				batchSizeCopy := int64(*resp.SourceParameters.ManagedStreamingKafkaParameters.BatchSize)
				f13f4.BatchSize = &batchSizeCopy
			}
			if resp.SourceParameters.ManagedStreamingKafkaParameters.ConsumerGroupID != nil {
				f13f4.ConsumerGroupID = resp.SourceParameters.ManagedStreamingKafkaParameters.ConsumerGroupID
			}
			if resp.SourceParameters.ManagedStreamingKafkaParameters.Credentials != nil {
				f13f4f2 := &svcapitypes.MSKAccessCredentials{}
				switch resp.SourceParameters.ManagedStreamingKafkaParameters.Credentials.(type) {
				case *svcsdktypes.MSKAccessCredentialsMemberClientCertificateTlsAuth:
					f13f4f2f0 := resp.SourceParameters.ManagedStreamingKafkaParameters.Credentials.(*svcsdktypes.MSKAccessCredentialsMemberClientCertificateTlsAuth)
					if f13f4f2f0 != nil {
						f13f4f2.ClientCertificateTLSAuth = &f13f4f2f0.Value
					}
				case *svcsdktypes.MSKAccessCredentialsMemberSaslScram512Auth:
					f13f4f2f1 := resp.SourceParameters.ManagedStreamingKafkaParameters.Credentials.(*svcsdktypes.MSKAccessCredentialsMemberSaslScram512Auth)
					if f13f4f2f1 != nil {
						f13f4f2.SASLSCRAM512Auth = &f13f4f2f1.Value
					}
				}
				f13f4.Credentials = f13f4f2
			}
			if resp.SourceParameters.ManagedStreamingKafkaParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy := int64(*resp.SourceParameters.ManagedStreamingKafkaParameters.MaximumBatchingWindowInSeconds)
				f13f4.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if resp.SourceParameters.ManagedStreamingKafkaParameters.StartingPosition != "" {
				f13f4.StartingPosition = aws.String(string(resp.SourceParameters.ManagedStreamingKafkaParameters.StartingPosition))
			}
			if resp.SourceParameters.ManagedStreamingKafkaParameters.TopicName != nil {
				f13f4.TopicName = resp.SourceParameters.ManagedStreamingKafkaParameters.TopicName
			}
			f13.ManagedStreamingKafkaParameters = f13f4
		}
		if resp.SourceParameters.RabbitMQBrokerParameters != nil {
			f13f5 := &svcapitypes.PipeSourceRabbitMQBrokerParameters{}
			if resp.SourceParameters.RabbitMQBrokerParameters.BatchSize != nil {
				batchSizeCopy := int64(*resp.SourceParameters.RabbitMQBrokerParameters.BatchSize)
				f13f5.BatchSize = &batchSizeCopy
			}
			if resp.SourceParameters.RabbitMQBrokerParameters.Credentials != nil {
				f13f5f1 := &svcapitypes.MQBrokerAccessCredentials{}
				switch resp.SourceParameters.RabbitMQBrokerParameters.Credentials.(type) {
				case *svcsdktypes.MQBrokerAccessCredentialsMemberBasicAuth:
					f13f5f1f0 := resp.SourceParameters.RabbitMQBrokerParameters.Credentials.(*svcsdktypes.MQBrokerAccessCredentialsMemberBasicAuth)
					if f13f5f1f0 != nil {
						f13f5f1.BasicAuth = &f13f5f1f0.Value
					}
				}
				f13f5.Credentials = f13f5f1
			}
			if resp.SourceParameters.RabbitMQBrokerParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy := int64(*resp.SourceParameters.RabbitMQBrokerParameters.MaximumBatchingWindowInSeconds)
				f13f5.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if resp.SourceParameters.RabbitMQBrokerParameters.QueueName != nil {
				f13f5.QueueName = resp.SourceParameters.RabbitMQBrokerParameters.QueueName
			}
			if resp.SourceParameters.RabbitMQBrokerParameters.VirtualHost != nil {
				f13f5.VirtualHost = resp.SourceParameters.RabbitMQBrokerParameters.VirtualHost
			}
			f13.RabbitMQBrokerParameters = f13f5
		}
		if resp.SourceParameters.SelfManagedKafkaParameters != nil {
			f13f6 := &svcapitypes.PipeSourceSelfManagedKafkaParameters{}
			if resp.SourceParameters.SelfManagedKafkaParameters.AdditionalBootstrapServers != nil {
				f13f6.AdditionalBootstrapServers = aws.StringSlice(resp.SourceParameters.SelfManagedKafkaParameters.AdditionalBootstrapServers)
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.BatchSize != nil {
				batchSizeCopy := int64(*resp.SourceParameters.SelfManagedKafkaParameters.BatchSize)
				f13f6.BatchSize = &batchSizeCopy
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.ConsumerGroupID != nil {
				f13f6.ConsumerGroupID = resp.SourceParameters.SelfManagedKafkaParameters.ConsumerGroupID
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.Credentials != nil {
				f13f6f3 := &svcapitypes.SelfManagedKafkaAccessConfigurationCredentials{}
				switch resp.SourceParameters.SelfManagedKafkaParameters.Credentials.(type) {
				case *svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberBasicAuth:
					f13f6f3f0 := resp.SourceParameters.SelfManagedKafkaParameters.Credentials.(*svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberBasicAuth)
					if f13f6f3f0 != nil {
						f13f6f3.BasicAuth = &f13f6f3f0.Value
					}
				case *svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberClientCertificateTlsAuth:
					f13f6f3f1 := resp.SourceParameters.SelfManagedKafkaParameters.Credentials.(*svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberClientCertificateTlsAuth)
					if f13f6f3f1 != nil {
						f13f6f3.ClientCertificateTLSAuth = &f13f6f3f1.Value
					}
				case *svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberSaslScram256Auth:
					f13f6f3f2 := resp.SourceParameters.SelfManagedKafkaParameters.Credentials.(*svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberSaslScram256Auth)
					if f13f6f3f2 != nil {
						f13f6f3.SASLSCRAM256Auth = &f13f6f3f2.Value
					}
				case *svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberSaslScram512Auth:
					f13f6f3f3 := resp.SourceParameters.SelfManagedKafkaParameters.Credentials.(*svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberSaslScram512Auth)
					if f13f6f3f3 != nil {
						f13f6f3.SASLSCRAM512Auth = &f13f6f3f3.Value
					}
				}
				f13f6.Credentials = f13f6f3
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy := int64(*resp.SourceParameters.SelfManagedKafkaParameters.MaximumBatchingWindowInSeconds)
				f13f6.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.ServerRootCaCertificate != nil {
				f13f6.ServerRootCaCertificate = resp.SourceParameters.SelfManagedKafkaParameters.ServerRootCaCertificate
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.StartingPosition != "" {
				f13f6.StartingPosition = aws.String(string(resp.SourceParameters.SelfManagedKafkaParameters.StartingPosition))
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.TopicName != nil {
				f13f6.TopicName = resp.SourceParameters.SelfManagedKafkaParameters.TopicName
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.Vpc != nil {
				f13f6f8 := &svcapitypes.SelfManagedKafkaAccessConfigurationVPC{}
				if resp.SourceParameters.SelfManagedKafkaParameters.Vpc.SecurityGroup != nil {
					f13f6f8.SecurityGroup = aws.StringSlice(resp.SourceParameters.SelfManagedKafkaParameters.Vpc.SecurityGroup)
				}
				if resp.SourceParameters.SelfManagedKafkaParameters.Vpc.Subnets != nil {
					f13f6f8.Subnets = aws.StringSlice(resp.SourceParameters.SelfManagedKafkaParameters.Vpc.Subnets)
				}
				f13f6.VPC = f13f6f8
			}
			f13.SelfManagedKafkaParameters = f13f6
		}
		if resp.SourceParameters.SqsQueueParameters != nil {
			f13f7 := &svcapitypes.PipeSourceSQSQueueParameters{}
			if resp.SourceParameters.SqsQueueParameters.BatchSize != nil {
				batchSizeCopy := int64(*resp.SourceParameters.SqsQueueParameters.BatchSize)
				f13f7.BatchSize = &batchSizeCopy
			}
			if resp.SourceParameters.SqsQueueParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy := int64(*resp.SourceParameters.SqsQueueParameters.MaximumBatchingWindowInSeconds)
				f13f7.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			f13.SQSQueueParameters = f13f7
		}
		ko.Spec.SourceParameters = f13
	} else {
		ko.Spec.SourceParameters = nil
	}
	if resp.StateReason != nil {
		ko.Status.StateReason = resp.StateReason
	} else {
		ko.Status.StateReason = nil
	}
	if resp.Tags != nil {
		ko.Spec.Tags = aws.StringMap(resp.Tags)
	} else {
		ko.Spec.Tags = nil
	}
	if resp.Target != nil {
		ko.Spec.Target = resp.Target
	} else {
		ko.Spec.Target = nil
	}
	if resp.TargetParameters != nil {
		f17 := &svcapitypes.PipeTargetParameters{}
		if resp.TargetParameters.BatchJobParameters != nil {
			f17f0 := &svcapitypes.PipeTargetBatchJobParameters{}
			if resp.TargetParameters.BatchJobParameters.ArrayProperties != nil {
				f17f0f0 := &svcapitypes.BatchArrayProperties{}
				if resp.TargetParameters.BatchJobParameters.ArrayProperties.Size != nil {
					sizeCopy := int64(*resp.TargetParameters.BatchJobParameters.ArrayProperties.Size)
					f17f0f0.Size = &sizeCopy
				}
				f17f0.ArrayProperties = f17f0f0
			}
			if resp.TargetParameters.BatchJobParameters.ContainerOverrides != nil {
				f17f0f1 := &svcapitypes.BatchContainerOverrides{}
				if resp.TargetParameters.BatchJobParameters.ContainerOverrides.Command != nil {
					f17f0f1.Command = aws.StringSlice(resp.TargetParameters.BatchJobParameters.ContainerOverrides.Command)
				}
				if resp.TargetParameters.BatchJobParameters.ContainerOverrides.Environment != nil {
					f17f0f1f1 := []*svcapitypes.BatchEnvironmentVariable{}
					for _, f17f0f1f1iter := range resp.TargetParameters.BatchJobParameters.ContainerOverrides.Environment {
						f17f0f1f1elem := &svcapitypes.BatchEnvironmentVariable{}
						if f17f0f1f1iter.Name != nil {
							f17f0f1f1elem.Name = f17f0f1f1iter.Name
						}
						if f17f0f1f1iter.Value != nil {
							f17f0f1f1elem.Value = f17f0f1f1iter.Value
						}
						f17f0f1f1 = append(f17f0f1f1, f17f0f1f1elem)
					}
					f17f0f1.Environment = f17f0f1f1
				}
				if resp.TargetParameters.BatchJobParameters.ContainerOverrides.InstanceType != nil {
					f17f0f1.InstanceType = resp.TargetParameters.BatchJobParameters.ContainerOverrides.InstanceType
				}
				if resp.TargetParameters.BatchJobParameters.ContainerOverrides.ResourceRequirements != nil {
					f17f0f1f3 := []*svcapitypes.BatchResourceRequirement{}
					for _, f17f0f1f3iter := range resp.TargetParameters.BatchJobParameters.ContainerOverrides.ResourceRequirements {
						f17f0f1f3elem := &svcapitypes.BatchResourceRequirement{}
						if f17f0f1f3iter.Type != "" {
							f17f0f1f3elem.Type = aws.String(string(f17f0f1f3iter.Type))
						}
						if f17f0f1f3iter.Value != nil {
							f17f0f1f3elem.Value = f17f0f1f3iter.Value
						}
						f17f0f1f3 = append(f17f0f1f3, f17f0f1f3elem)
					}
					f17f0f1.ResourceRequirements = f17f0f1f3
				}
				f17f0.ContainerOverrides = f17f0f1
			}
			if resp.TargetParameters.BatchJobParameters.DependsOn != nil {
				f17f0f2 := []*svcapitypes.BatchJobDependency{}
				for _, f17f0f2iter := range resp.TargetParameters.BatchJobParameters.DependsOn {
					f17f0f2elem := &svcapitypes.BatchJobDependency{}
					if f17f0f2iter.JobId != nil {
						f17f0f2elem.JobID = f17f0f2iter.JobId
					}
					if f17f0f2iter.Type != "" {
						f17f0f2elem.Type = aws.String(string(f17f0f2iter.Type))
					}
					f17f0f2 = append(f17f0f2, f17f0f2elem)
				}
				f17f0.DependsOn = f17f0f2
			}
			if resp.TargetParameters.BatchJobParameters.JobDefinition != nil {
				f17f0.JobDefinition = resp.TargetParameters.BatchJobParameters.JobDefinition
			}
			if resp.TargetParameters.BatchJobParameters.JobName != nil {
				f17f0.JobName = resp.TargetParameters.BatchJobParameters.JobName
			}
			if resp.TargetParameters.BatchJobParameters.Parameters != nil {
				f17f0.Parameters = aws.StringMap(resp.TargetParameters.BatchJobParameters.Parameters)
			}
			if resp.TargetParameters.BatchJobParameters.RetryStrategy != nil {
				f17f0f6 := &svcapitypes.BatchRetryStrategy{}
				if resp.TargetParameters.BatchJobParameters.RetryStrategy.Attempts != nil {
					attemptsCopy := int64(*resp.TargetParameters.BatchJobParameters.RetryStrategy.Attempts)
					f17f0f6.Attempts = &attemptsCopy
				}
				f17f0.RetryStrategy = f17f0f6
			}
			f17.BatchJobParameters = f17f0
		}
		if resp.TargetParameters.CloudWatchLogsParameters != nil {
			f17f1 := &svcapitypes.PipeTargetCloudWatchLogsParameters{}
			if resp.TargetParameters.CloudWatchLogsParameters.LogStreamName != nil {
				f17f1.LogStreamName = resp.TargetParameters.CloudWatchLogsParameters.LogStreamName
			}
			if resp.TargetParameters.CloudWatchLogsParameters.Timestamp != nil {
				f17f1.Timestamp = resp.TargetParameters.CloudWatchLogsParameters.Timestamp
			}
			f17.CloudWatchLogsParameters = f17f1
		}
		if resp.TargetParameters.EcsTaskParameters != nil {
			f17f2 := &svcapitypes.PipeTargetECSTaskParameters{}
			if resp.TargetParameters.EcsTaskParameters.CapacityProviderStrategy != nil {
				f17f2f0 := []*svcapitypes.CapacityProviderStrategyItem{}
				for _, f17f2f0iter := range resp.TargetParameters.EcsTaskParameters.CapacityProviderStrategy {
					f17f2f0elem := &svcapitypes.CapacityProviderStrategyItem{}
					baseCopy := int64(f17f2f0iter.Base)
					f17f2f0elem.Base = &baseCopy
					if f17f2f0iter.CapacityProvider != nil {
						f17f2f0elem.CapacityProvider = f17f2f0iter.CapacityProvider
					}
					weightCopy := int64(f17f2f0iter.Weight)
					f17f2f0elem.Weight = &weightCopy
					f17f2f0 = append(f17f2f0, f17f2f0elem)
				}
				f17f2.CapacityProviderStrategy = f17f2f0
			}
			f17f2.EnableECSManagedTags = &resp.TargetParameters.EcsTaskParameters.EnableECSManagedTags
			f17f2.EnableExecuteCommand = &resp.TargetParameters.EcsTaskParameters.EnableExecuteCommand
			if resp.TargetParameters.EcsTaskParameters.Group != nil {
				f17f2.Group = resp.TargetParameters.EcsTaskParameters.Group
			}
			if resp.TargetParameters.EcsTaskParameters.LaunchType != "" {
				f17f2.LaunchType = aws.String(string(resp.TargetParameters.EcsTaskParameters.LaunchType))
			}
			if resp.TargetParameters.EcsTaskParameters.NetworkConfiguration != nil {
				f17f2f5 := &svcapitypes.NetworkConfiguration{}
				if resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration != nil {
					f17f2f5f0 := &svcapitypes.AWSVPCConfiguration{}
					if resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != "" {
						f17f2f5f0.AssignPublicIP = aws.String(string(resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp))
					}
					if resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
						f17f2f5f0.SecurityGroups = aws.StringSlice(resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups)
					}
					if resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
						f17f2f5f0.Subnets = aws.StringSlice(resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration.Subnets)
					}
					f17f2f5.AWSVPCConfiguration = f17f2f5f0
				}
				f17f2.NetworkConfiguration = f17f2f5
			}
			if resp.TargetParameters.EcsTaskParameters.Overrides != nil {
				f17f2f6 := &svcapitypes.ECSTaskOverride{}
				if resp.TargetParameters.EcsTaskParameters.Overrides.ContainerOverrides != nil {
					f17f2f6f0 := []*svcapitypes.ECSContainerOverride{}
					for _, f17f2f6f0iter := range resp.TargetParameters.EcsTaskParameters.Overrides.ContainerOverrides {
						f17f2f6f0elem := &svcapitypes.ECSContainerOverride{}
						if f17f2f6f0iter.Command != nil {
							f17f2f6f0elem.Command = aws.StringSlice(f17f2f6f0iter.Command)
						}
						if f17f2f6f0iter.Cpu != nil {
							cpuCopy := int64(*f17f2f6f0iter.Cpu)
							f17f2f6f0elem.CPU = &cpuCopy
						}
						if f17f2f6f0iter.Environment != nil {
							f17f2f6f0elemf2 := []*svcapitypes.ECSEnvironmentVariable{}
							for _, f17f2f6f0elemf2iter := range f17f2f6f0iter.Environment {
								f17f2f6f0elemf2elem := &svcapitypes.ECSEnvironmentVariable{}
								if f17f2f6f0elemf2iter.Name != nil {
									f17f2f6f0elemf2elem.Name = f17f2f6f0elemf2iter.Name
								}
								if f17f2f6f0elemf2iter.Value != nil {
									f17f2f6f0elemf2elem.Value = f17f2f6f0elemf2iter.Value
								}
								f17f2f6f0elemf2 = append(f17f2f6f0elemf2, f17f2f6f0elemf2elem)
							}
							f17f2f6f0elem.Environment = f17f2f6f0elemf2
						}
						if f17f2f6f0iter.EnvironmentFiles != nil {
							f17f2f6f0elemf3 := []*svcapitypes.ECSEnvironmentFile{}
							for _, f17f2f6f0elemf3iter := range f17f2f6f0iter.EnvironmentFiles {
								f17f2f6f0elemf3elem := &svcapitypes.ECSEnvironmentFile{}
								if f17f2f6f0elemf3iter.Type != "" {
									f17f2f6f0elemf3elem.Type = aws.String(string(f17f2f6f0elemf3iter.Type))
								}
								if f17f2f6f0elemf3iter.Value != nil {
									f17f2f6f0elemf3elem.Value = f17f2f6f0elemf3iter.Value
								}
								f17f2f6f0elemf3 = append(f17f2f6f0elemf3, f17f2f6f0elemf3elem)
							}
							f17f2f6f0elem.EnvironmentFiles = f17f2f6f0elemf3
						}
						if f17f2f6f0iter.Memory != nil {
							memoryCopy := int64(*f17f2f6f0iter.Memory)
							f17f2f6f0elem.Memory = &memoryCopy
						}
						if f17f2f6f0iter.MemoryReservation != nil {
							memoryReservationCopy := int64(*f17f2f6f0iter.MemoryReservation)
							f17f2f6f0elem.MemoryReservation = &memoryReservationCopy
						}
						if f17f2f6f0iter.Name != nil {
							f17f2f6f0elem.Name = f17f2f6f0iter.Name
						}
						if f17f2f6f0iter.ResourceRequirements != nil {
							f17f2f6f0elemf7 := []*svcapitypes.ECSResourceRequirement{}
							for _, f17f2f6f0elemf7iter := range f17f2f6f0iter.ResourceRequirements {
								f17f2f6f0elemf7elem := &svcapitypes.ECSResourceRequirement{}
								if f17f2f6f0elemf7iter.Type != "" {
									f17f2f6f0elemf7elem.Type = aws.String(string(f17f2f6f0elemf7iter.Type))
								}
								if f17f2f6f0elemf7iter.Value != nil {
									f17f2f6f0elemf7elem.Value = f17f2f6f0elemf7iter.Value
								}
								f17f2f6f0elemf7 = append(f17f2f6f0elemf7, f17f2f6f0elemf7elem)
							}
							f17f2f6f0elem.ResourceRequirements = f17f2f6f0elemf7
						}
						f17f2f6f0 = append(f17f2f6f0, f17f2f6f0elem)
					}
					f17f2f6.ContainerOverrides = f17f2f6f0
				}
				if resp.TargetParameters.EcsTaskParameters.Overrides.Cpu != nil {
					f17f2f6.CPU = resp.TargetParameters.EcsTaskParameters.Overrides.Cpu
				}
				if resp.TargetParameters.EcsTaskParameters.Overrides.EphemeralStorage != nil {
					f17f2f6f2 := &svcapitypes.ECSEphemeralStorage{}
					if resp.TargetParameters.EcsTaskParameters.Overrides.EphemeralStorage.SizeInGiB != nil {
						sizeInGiBCopy := int64(*resp.TargetParameters.EcsTaskParameters.Overrides.EphemeralStorage.SizeInGiB)
						f17f2f6f2.SizeInGiB = &sizeInGiBCopy
					}
					f17f2f6.EphemeralStorage = f17f2f6f2
				}
				if resp.TargetParameters.EcsTaskParameters.Overrides.ExecutionRoleArn != nil {
					f17f2f6.ExecutionRoleARN = resp.TargetParameters.EcsTaskParameters.Overrides.ExecutionRoleArn
				}
				if resp.TargetParameters.EcsTaskParameters.Overrides.InferenceAcceleratorOverrides != nil {
					f17f2f6f4 := []*svcapitypes.ECSInferenceAcceleratorOverride{}
					for _, f17f2f6f4iter := range resp.TargetParameters.EcsTaskParameters.Overrides.InferenceAcceleratorOverrides {
						f17f2f6f4elem := &svcapitypes.ECSInferenceAcceleratorOverride{}
						if f17f2f6f4iter.DeviceName != nil {
							f17f2f6f4elem.DeviceName = f17f2f6f4iter.DeviceName
						}
						if f17f2f6f4iter.DeviceType != nil {
							f17f2f6f4elem.DeviceType = f17f2f6f4iter.DeviceType
						}
						f17f2f6f4 = append(f17f2f6f4, f17f2f6f4elem)
					}
					f17f2f6.InferenceAcceleratorOverrides = f17f2f6f4
				}
				if resp.TargetParameters.EcsTaskParameters.Overrides.Memory != nil {
					f17f2f6.Memory = resp.TargetParameters.EcsTaskParameters.Overrides.Memory
				}
				if resp.TargetParameters.EcsTaskParameters.Overrides.TaskRoleArn != nil {
					f17f2f6.TaskRoleARN = resp.TargetParameters.EcsTaskParameters.Overrides.TaskRoleArn
				}
				f17f2.Overrides = f17f2f6
			}
			if resp.TargetParameters.EcsTaskParameters.PlacementConstraints != nil {
				f17f2f7 := []*svcapitypes.PlacementConstraint{}
				for _, f17f2f7iter := range resp.TargetParameters.EcsTaskParameters.PlacementConstraints {
					f17f2f7elem := &svcapitypes.PlacementConstraint{}
					if f17f2f7iter.Expression != nil {
						f17f2f7elem.Expression = f17f2f7iter.Expression
					}
					if f17f2f7iter.Type != "" {
						f17f2f7elem.Type = aws.String(string(f17f2f7iter.Type))
					}
					f17f2f7 = append(f17f2f7, f17f2f7elem)
				}
				f17f2.PlacementConstraints = f17f2f7
			}
			if resp.TargetParameters.EcsTaskParameters.PlacementStrategy != nil {
				f17f2f8 := []*svcapitypes.PlacementStrategy{}
				for _, f17f2f8iter := range resp.TargetParameters.EcsTaskParameters.PlacementStrategy {
					f17f2f8elem := &svcapitypes.PlacementStrategy{}
					if f17f2f8iter.Field != nil {
						f17f2f8elem.Field = f17f2f8iter.Field
					}
					if f17f2f8iter.Type != "" {
						f17f2f8elem.Type = aws.String(string(f17f2f8iter.Type))
					}
					f17f2f8 = append(f17f2f8, f17f2f8elem)
				}
				f17f2.PlacementStrategy = f17f2f8
			}
			if resp.TargetParameters.EcsTaskParameters.PlatformVersion != nil {
				f17f2.PlatformVersion = resp.TargetParameters.EcsTaskParameters.PlatformVersion
			}
			if resp.TargetParameters.EcsTaskParameters.PropagateTags != "" {
				f17f2.PropagateTags = aws.String(string(resp.TargetParameters.EcsTaskParameters.PropagateTags))
			}
			if resp.TargetParameters.EcsTaskParameters.ReferenceId != nil {
				f17f2.ReferenceID = resp.TargetParameters.EcsTaskParameters.ReferenceId
			}
			if resp.TargetParameters.EcsTaskParameters.Tags != nil {
				f17f2f12 := []*svcapitypes.Tag{}
				for _, f17f2f12iter := range resp.TargetParameters.EcsTaskParameters.Tags {
					f17f2f12elem := &svcapitypes.Tag{}
					if f17f2f12iter.Key != nil {
						f17f2f12elem.Key = f17f2f12iter.Key
					}
					if f17f2f12iter.Value != nil {
						f17f2f12elem.Value = f17f2f12iter.Value
					}
					f17f2f12 = append(f17f2f12, f17f2f12elem)
				}
				f17f2.Tags = f17f2f12
			}
			if resp.TargetParameters.EcsTaskParameters.TaskCount != nil {
				taskCountCopy := int64(*resp.TargetParameters.EcsTaskParameters.TaskCount)
				f17f2.TaskCount = &taskCountCopy
			}
			if resp.TargetParameters.EcsTaskParameters.TaskDefinitionArn != nil {
				f17f2.TaskDefinitionARN = resp.TargetParameters.EcsTaskParameters.TaskDefinitionArn
			}
			f17.ECSTaskParameters = f17f2
		}
		if resp.TargetParameters.EventBridgeEventBusParameters != nil {
			f17f3 := &svcapitypes.PipeTargetEventBridgeEventBusParameters{}
			if resp.TargetParameters.EventBridgeEventBusParameters.DetailType != nil {
				f17f3.DetailType = resp.TargetParameters.EventBridgeEventBusParameters.DetailType
			}
			if resp.TargetParameters.EventBridgeEventBusParameters.EndpointId != nil {
				f17f3.EndpointID = resp.TargetParameters.EventBridgeEventBusParameters.EndpointId
			}
			if resp.TargetParameters.EventBridgeEventBusParameters.Resources != nil {
				f17f3.Resources = aws.StringSlice(resp.TargetParameters.EventBridgeEventBusParameters.Resources)
			}
			if resp.TargetParameters.EventBridgeEventBusParameters.Source != nil {
				f17f3.Source = resp.TargetParameters.EventBridgeEventBusParameters.Source
			}
			if resp.TargetParameters.EventBridgeEventBusParameters.Time != nil {
				f17f3.Time = resp.TargetParameters.EventBridgeEventBusParameters.Time
			}
			f17.EventBridgeEventBusParameters = f17f3
		}
		if resp.TargetParameters.HttpParameters != nil {
			f17f4 := &svcapitypes.PipeTargetHTTPParameters{}
			if resp.TargetParameters.HttpParameters.HeaderParameters != nil {
				f17f4.HeaderParameters = aws.StringMap(resp.TargetParameters.HttpParameters.HeaderParameters)
			}
			if resp.TargetParameters.HttpParameters.PathParameterValues != nil {
				f17f4.PathParameterValues = aws.StringSlice(resp.TargetParameters.HttpParameters.PathParameterValues)
			}
			if resp.TargetParameters.HttpParameters.QueryStringParameters != nil {
				f17f4.QueryStringParameters = aws.StringMap(resp.TargetParameters.HttpParameters.QueryStringParameters)
			}
			f17.HTTPParameters = f17f4
		}
		if resp.TargetParameters.InputTemplate != nil {
			f17.InputTemplate = resp.TargetParameters.InputTemplate
		}
		if resp.TargetParameters.KinesisStreamParameters != nil {
			f17f6 := &svcapitypes.PipeTargetKinesisStreamParameters{}
			if resp.TargetParameters.KinesisStreamParameters.PartitionKey != nil {
				f17f6.PartitionKey = resp.TargetParameters.KinesisStreamParameters.PartitionKey
			}
			f17.KinesisStreamParameters = f17f6
		}
		if resp.TargetParameters.LambdaFunctionParameters != nil {
			f17f7 := &svcapitypes.PipeTargetLambdaFunctionParameters{}
			if resp.TargetParameters.LambdaFunctionParameters.InvocationType != "" {
				f17f7.InvocationType = aws.String(string(resp.TargetParameters.LambdaFunctionParameters.InvocationType))
			}
			f17.LambdaFunctionParameters = f17f7
		}
		if resp.TargetParameters.RedshiftDataParameters != nil {
			f17f8 := &svcapitypes.PipeTargetRedshiftDataParameters{}
			if resp.TargetParameters.RedshiftDataParameters.Database != nil {
				f17f8.Database = resp.TargetParameters.RedshiftDataParameters.Database
			}
			if resp.TargetParameters.RedshiftDataParameters.DbUser != nil {
				f17f8.DBUser = resp.TargetParameters.RedshiftDataParameters.DbUser
			}
			if resp.TargetParameters.RedshiftDataParameters.SecretManagerArn != nil {
				f17f8.SecretManagerARN = resp.TargetParameters.RedshiftDataParameters.SecretManagerArn
			}
			if resp.TargetParameters.RedshiftDataParameters.Sqls != nil {
				f17f8.SQLs = aws.StringSlice(resp.TargetParameters.RedshiftDataParameters.Sqls)
			}
			if resp.TargetParameters.RedshiftDataParameters.StatementName != nil {
				f17f8.StatementName = resp.TargetParameters.RedshiftDataParameters.StatementName
			}
			f17f8.WithEvent = &resp.TargetParameters.RedshiftDataParameters.WithEvent
			f17.RedshiftDataParameters = f17f8
		}
		if resp.TargetParameters.SageMakerPipelineParameters != nil {
			f17f9 := &svcapitypes.PipeTargetSageMakerPipelineParameters{}
			if resp.TargetParameters.SageMakerPipelineParameters.PipelineParameterList != nil {
				f17f9f0 := []*svcapitypes.SageMakerPipelineParameter{}
				for _, f17f9f0iter := range resp.TargetParameters.SageMakerPipelineParameters.PipelineParameterList {
					f17f9f0elem := &svcapitypes.SageMakerPipelineParameter{}
					if f17f9f0iter.Name != nil {
						f17f9f0elem.Name = f17f9f0iter.Name
					}
					if f17f9f0iter.Value != nil {
						f17f9f0elem.Value = f17f9f0iter.Value
					}
					f17f9f0 = append(f17f9f0, f17f9f0elem)
				}
				f17f9.PipelineParameterList = f17f9f0
			}
			f17.SageMakerPipelineParameters = f17f9
		}
		if resp.TargetParameters.SqsQueueParameters != nil {
			f17f10 := &svcapitypes.PipeTargetSQSQueueParameters{}
			if resp.TargetParameters.SqsQueueParameters.MessageDeduplicationId != nil {
				f17f10.MessageDeduplicationID = resp.TargetParameters.SqsQueueParameters.MessageDeduplicationId
			}
			if resp.TargetParameters.SqsQueueParameters.MessageGroupId != nil {
				f17f10.MessageGroupID = resp.TargetParameters.SqsQueueParameters.MessageGroupId
			}
			f17.SQSQueueParameters = f17f10
		}
		if resp.TargetParameters.StepFunctionStateMachineParameters != nil {
			f17f11 := &svcapitypes.PipeTargetStateMachineParameters{}
			if resp.TargetParameters.StepFunctionStateMachineParameters.InvocationType != "" {
				f17f11.InvocationType = aws.String(string(resp.TargetParameters.StepFunctionStateMachineParameters.InvocationType))
			}
			f17.StepFunctionStateMachineParameters = f17f11
		}
		ko.Spec.TargetParameters = f17
	} else {
		ko.Spec.TargetParameters = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.Name == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribePipeInput, error) {
	res := &svcsdk.DescribePipeInput{}

	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreatePipeOutput
	_ = resp
	resp, err = rm.sdkapi.CreatePipe(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreatePipe", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.CurrentState != "" {
		ko.Status.CurrentState = aws.String(string(resp.CurrentState))
	} else {
		ko.Status.CurrentState = nil
	}
	if resp.DesiredState != "" {
		ko.Spec.DesiredState = aws.String(string(resp.DesiredState))
	} else {
		ko.Spec.DesiredState = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}

	rm.setStatusDefaults(ko)
	if !pipeAvailable(&resource{ko}) {
		return &resource{ko}, requeueWaitWhileCreating
	}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreatePipeInput, error) {
	res := &svcsdk.CreatePipeInput{}

	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.DesiredState != nil {
		res.DesiredState = svcsdktypes.RequestedPipeState(*r.ko.Spec.DesiredState)
	}
	if r.ko.Spec.Enrichment != nil {
		res.Enrichment = r.ko.Spec.Enrichment
	}
	if r.ko.Spec.EnrichmentParameters != nil {
		f3 := &svcsdktypes.PipeEnrichmentParameters{}
		if r.ko.Spec.EnrichmentParameters.HTTPParameters != nil {
			f3f0 := &svcsdktypes.PipeEnrichmentHttpParameters{}
			if r.ko.Spec.EnrichmentParameters.HTTPParameters.HeaderParameters != nil {
				f3f0.HeaderParameters = aws.ToStringMap(r.ko.Spec.EnrichmentParameters.HTTPParameters.HeaderParameters)
			}
			if r.ko.Spec.EnrichmentParameters.HTTPParameters.PathParameterValues != nil {
				f3f0.PathParameterValues = aws.ToStringSlice(r.ko.Spec.EnrichmentParameters.HTTPParameters.PathParameterValues)
			}
			if r.ko.Spec.EnrichmentParameters.HTTPParameters.QueryStringParameters != nil {
				f3f0.QueryStringParameters = aws.ToStringMap(r.ko.Spec.EnrichmentParameters.HTTPParameters.QueryStringParameters)
			}
			f3.HttpParameters = f3f0
		}
		if r.ko.Spec.EnrichmentParameters.InputTemplate != nil {
			f3.InputTemplate = r.ko.Spec.EnrichmentParameters.InputTemplate
		}
		res.EnrichmentParameters = f3
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}
	if r.ko.Spec.RoleARN != nil {
		res.RoleArn = r.ko.Spec.RoleARN
	}
	if r.ko.Spec.Source != nil {
		res.Source = r.ko.Spec.Source
	}
	if r.ko.Spec.SourceParameters != nil {
		f7 := &svcsdktypes.PipeSourceParameters{}
		if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters != nil {
			f7f0 := &svcsdktypes.PipeSourceActiveMQBrokerParameters{}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f7f0.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.Credentials != nil {
				var f7f0f1 svcsdktypes.MQBrokerAccessCredentials
				isInterfaceSet := false
				if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.Credentials.BasicAuth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for BasicAuth"))
					}
					f7f0f1f0Parent := &svcsdktypes.MQBrokerAccessCredentialsMemberBasicAuth{}
					f7f0f1f0Parent.Value = *r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.Credentials.BasicAuth
				}
				f7f0.Credentials = f7f0f1
			}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f7f0.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.QueueName != nil {
				f7f0.QueueName = r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.QueueName
			}
			f7.ActiveMQBrokerParameters = f7f0
		}
		if r.ko.Spec.SourceParameters.DynamoDBStreamParameters != nil {
			f7f1 := &svcsdktypes.PipeSourceDynamoDBStreamParameters{}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.DynamoDBStreamParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f7f1.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig != nil {
				f7f1f1 := &svcsdktypes.DeadLetterConfig{}
				if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig.ARN != nil {
					f7f1f1.Arn = r.ko.Spec.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig.ARN
				}
				f7f1.DeadLetterConfig = f7f1f1
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f7f1.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRecordAgeInSeconds != nil {
				maximumRecordAgeInSecondsCopy0 := *r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRecordAgeInSeconds
				if maximumRecordAgeInSecondsCopy0 > math.MaxInt32 || maximumRecordAgeInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumRecordAgeInSeconds is of type int32")
				}
				maximumRecordAgeInSecondsCopy := int32(maximumRecordAgeInSecondsCopy0)
				f7f1.MaximumRecordAgeInSeconds = &maximumRecordAgeInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRetryAttempts != nil {
				maximumRetryAttemptsCopy0 := *r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRetryAttempts
				if maximumRetryAttemptsCopy0 > math.MaxInt32 || maximumRetryAttemptsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumRetryAttempts is of type int32")
				}
				maximumRetryAttemptsCopy := int32(maximumRetryAttemptsCopy0)
				f7f1.MaximumRetryAttempts = &maximumRetryAttemptsCopy
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.OnPartialBatchItemFailure != nil {
				f7f1.OnPartialBatchItemFailure = svcsdktypes.OnPartialBatchItemFailureStreams(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.OnPartialBatchItemFailure)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.ParallelizationFactor != nil {
				parallelizationFactorCopy0 := *r.ko.Spec.SourceParameters.DynamoDBStreamParameters.ParallelizationFactor
				if parallelizationFactorCopy0 > math.MaxInt32 || parallelizationFactorCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ParallelizationFactor is of type int32")
				}
				parallelizationFactorCopy := int32(parallelizationFactorCopy0)
				f7f1.ParallelizationFactor = &parallelizationFactorCopy
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.StartingPosition != nil {
				f7f1.StartingPosition = svcsdktypes.DynamoDBStreamStartPosition(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.StartingPosition)
			}
			f7.DynamoDBStreamParameters = f7f1
		}
		if r.ko.Spec.SourceParameters.FilterCriteria != nil {
			f7f2 := &svcsdktypes.FilterCriteria{}
			if r.ko.Spec.SourceParameters.FilterCriteria.Filters != nil {
				f7f2f0 := []svcsdktypes.Filter{}
				for _, f7f2f0iter := range r.ko.Spec.SourceParameters.FilterCriteria.Filters {
					f7f2f0elem := &svcsdktypes.Filter{}
					if f7f2f0iter.Pattern != nil {
						f7f2f0elem.Pattern = f7f2f0iter.Pattern
					}
					f7f2f0 = append(f7f2f0, *f7f2f0elem)
				}
				f7f2.Filters = f7f2f0
			}
			f7.FilterCriteria = f7f2
		}
		if r.ko.Spec.SourceParameters.KinesisStreamParameters != nil {
			f7f3 := &svcsdktypes.PipeSourceKinesisStreamParameters{}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.KinesisStreamParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f7f3.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.DeadLetterConfig != nil {
				f7f3f1 := &svcsdktypes.DeadLetterConfig{}
				if r.ko.Spec.SourceParameters.KinesisStreamParameters.DeadLetterConfig.ARN != nil {
					f7f3f1.Arn = r.ko.Spec.SourceParameters.KinesisStreamParameters.DeadLetterConfig.ARN
				}
				f7f3.DeadLetterConfig = f7f3f1
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f7f3.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRecordAgeInSeconds != nil {
				maximumRecordAgeInSecondsCopy0 := *r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRecordAgeInSeconds
				if maximumRecordAgeInSecondsCopy0 > math.MaxInt32 || maximumRecordAgeInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumRecordAgeInSeconds is of type int32")
				}
				maximumRecordAgeInSecondsCopy := int32(maximumRecordAgeInSecondsCopy0)
				f7f3.MaximumRecordAgeInSeconds = &maximumRecordAgeInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRetryAttempts != nil {
				maximumRetryAttemptsCopy0 := *r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRetryAttempts
				if maximumRetryAttemptsCopy0 > math.MaxInt32 || maximumRetryAttemptsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumRetryAttempts is of type int32")
				}
				maximumRetryAttemptsCopy := int32(maximumRetryAttemptsCopy0)
				f7f3.MaximumRetryAttempts = &maximumRetryAttemptsCopy
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.OnPartialBatchItemFailure != nil {
				f7f3.OnPartialBatchItemFailure = svcsdktypes.OnPartialBatchItemFailureStreams(*r.ko.Spec.SourceParameters.KinesisStreamParameters.OnPartialBatchItemFailure)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.ParallelizationFactor != nil {
				parallelizationFactorCopy0 := *r.ko.Spec.SourceParameters.KinesisStreamParameters.ParallelizationFactor
				if parallelizationFactorCopy0 > math.MaxInt32 || parallelizationFactorCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ParallelizationFactor is of type int32")
				}
				parallelizationFactorCopy := int32(parallelizationFactorCopy0)
				f7f3.ParallelizationFactor = &parallelizationFactorCopy
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.StartingPosition != nil {
				f7f3.StartingPosition = svcsdktypes.KinesisStreamStartPosition(*r.ko.Spec.SourceParameters.KinesisStreamParameters.StartingPosition)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.StartingPositionTimestamp != nil {
				f7f3.StartingPositionTimestamp = &r.ko.Spec.SourceParameters.KinesisStreamParameters.StartingPositionTimestamp.Time
			}
			f7.KinesisStreamParameters = f7f3
		}
		if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters != nil {
			f7f4 := &svcsdktypes.PipeSourceManagedStreamingKafkaParameters{}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f7f4.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.ConsumerGroupID != nil {
				f7f4.ConsumerGroupID = r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.ConsumerGroupID
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials != nil {
				var f7f4f2 svcsdktypes.MSKAccessCredentials
				isInterfaceSet := false
				if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.ClientCertificateTLSAuth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for ClientCertificateTlsAuth"))
					}
					f7f4f2f0Parent := &svcsdktypes.MSKAccessCredentialsMemberClientCertificateTlsAuth{}
					f7f4f2f0Parent.Value = *r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.ClientCertificateTLSAuth
				}
				if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.SASLSCRAM512Auth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for SaslScram512Auth"))
					}
					f7f4f2f1Parent := &svcsdktypes.MSKAccessCredentialsMemberSaslScram512Auth{}
					f7f4f2f1Parent.Value = *r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.SASLSCRAM512Auth
				}
				f7f4.Credentials = f7f4f2
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f7f4.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.StartingPosition != nil {
				f7f4.StartingPosition = svcsdktypes.MSKStartPosition(*r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.StartingPosition)
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.TopicName != nil {
				f7f4.TopicName = r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.TopicName
			}
			f7.ManagedStreamingKafkaParameters = f7f4
		}
		if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters != nil {
			f7f5 := &svcsdktypes.PipeSourceRabbitMQBrokerParameters{}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f7f5.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.Credentials != nil {
				var f7f5f1 svcsdktypes.MQBrokerAccessCredentials
				isInterfaceSet := false
				if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.Credentials.BasicAuth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for BasicAuth"))
					}
					f7f5f1f0Parent := &svcsdktypes.MQBrokerAccessCredentialsMemberBasicAuth{}
					f7f5f1f0Parent.Value = *r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.Credentials.BasicAuth
				}
				f7f5.Credentials = f7f5f1
			}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f7f5.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.QueueName != nil {
				f7f5.QueueName = r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.QueueName
			}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.VirtualHost != nil {
				f7f5.VirtualHost = r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.VirtualHost
			}
			f7.RabbitMQBrokerParameters = f7f5
		}
		if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters != nil {
			f7f6 := &svcsdktypes.PipeSourceSelfManagedKafkaParameters{}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.AdditionalBootstrapServers != nil {
				f7f6.AdditionalBootstrapServers = aws.ToStringSlice(r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.AdditionalBootstrapServers)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f7f6.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.ConsumerGroupID != nil {
				f7f6.ConsumerGroupID = r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.ConsumerGroupID
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials != nil {
				var f7f6f3 svcsdktypes.SelfManagedKafkaAccessConfigurationCredentials
				isInterfaceSet := false
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.BasicAuth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for BasicAuth"))
					}
					f7f6f3f0Parent := &svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberBasicAuth{}
					f7f6f3f0Parent.Value = *r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.BasicAuth
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.ClientCertificateTLSAuth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for ClientCertificateTlsAuth"))
					}
					f7f6f3f1Parent := &svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberClientCertificateTlsAuth{}
					f7f6f3f1Parent.Value = *r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.ClientCertificateTLSAuth
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM256Auth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for SaslScram256Auth"))
					}
					f7f6f3f2Parent := &svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberSaslScram256Auth{}
					f7f6f3f2Parent.Value = *r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM256Auth
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM512Auth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for SaslScram512Auth"))
					}
					f7f6f3f3Parent := &svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberSaslScram512Auth{}
					f7f6f3f3Parent.Value = *r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM512Auth
				}
				f7f6.Credentials = f7f6f3
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f7f6.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.ServerRootCaCertificate != nil {
				f7f6.ServerRootCaCertificate = r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.ServerRootCaCertificate
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.StartingPosition != nil {
				f7f6.StartingPosition = svcsdktypes.SelfManagedKafkaStartPosition(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.StartingPosition)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.TopicName != nil {
				f7f6.TopicName = r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.TopicName
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC != nil {
				f7f6f8 := &svcsdktypes.SelfManagedKafkaAccessConfigurationVpc{}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.SecurityGroup != nil {
					f7f6f8.SecurityGroup = aws.ToStringSlice(r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.SecurityGroup)
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.Subnets != nil {
					f7f6f8.Subnets = aws.ToStringSlice(r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.Subnets)
				}
				f7f6.Vpc = f7f6f8
			}
			f7.SelfManagedKafkaParameters = f7f6
		}
		if r.ko.Spec.SourceParameters.SQSQueueParameters != nil {
			f7f7 := &svcsdktypes.PipeSourceSqsQueueParameters{}
			if r.ko.Spec.SourceParameters.SQSQueueParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.SQSQueueParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f7f7.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.SQSQueueParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.SQSQueueParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f7f7.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			f7.SqsQueueParameters = f7f7
		}
		res.SourceParameters = f7
	}
	if r.ko.Spec.Tags != nil {
		res.Tags = aws.ToStringMap(r.ko.Spec.Tags)
	}
	if r.ko.Spec.Target != nil {
		res.Target = r.ko.Spec.Target
	}
	if r.ko.Spec.TargetParameters != nil {
		f10 := &svcsdktypes.PipeTargetParameters{}
		if r.ko.Spec.TargetParameters.BatchJobParameters != nil {
			f10f0 := &svcsdktypes.PipeTargetBatchJobParameters{}
			if r.ko.Spec.TargetParameters.BatchJobParameters.ArrayProperties != nil {
				f10f0f0 := &svcsdktypes.BatchArrayProperties{}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ArrayProperties.Size != nil {
					sizeCopy0 := *r.ko.Spec.TargetParameters.BatchJobParameters.ArrayProperties.Size
					if sizeCopy0 > math.MaxInt32 || sizeCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Size is of type int32")
					}
					sizeCopy := int32(sizeCopy0)
					f10f0f0.Size = &sizeCopy
				}
				f10f0.ArrayProperties = f10f0f0
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides != nil {
				f10f0f1 := &svcsdktypes.BatchContainerOverrides{}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Command != nil {
					f10f0f1.Command = aws.ToStringSlice(r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Command)
				}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Environment != nil {
					f10f0f1f1 := []svcsdktypes.BatchEnvironmentVariable{}
					for _, f10f0f1f1iter := range r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Environment {
						f10f0f1f1elem := &svcsdktypes.BatchEnvironmentVariable{}
						if f10f0f1f1iter.Name != nil {
							f10f0f1f1elem.Name = f10f0f1f1iter.Name
						}
						if f10f0f1f1iter.Value != nil {
							f10f0f1f1elem.Value = f10f0f1f1iter.Value
						}
						f10f0f1f1 = append(f10f0f1f1, *f10f0f1f1elem)
					}
					f10f0f1.Environment = f10f0f1f1
				}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.InstanceType != nil {
					f10f0f1.InstanceType = r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.InstanceType
				}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.ResourceRequirements != nil {
					f10f0f1f3 := []svcsdktypes.BatchResourceRequirement{}
					for _, f10f0f1f3iter := range r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.ResourceRequirements {
						f10f0f1f3elem := &svcsdktypes.BatchResourceRequirement{}
						if f10f0f1f3iter.Type != nil {
							f10f0f1f3elem.Type = svcsdktypes.BatchResourceRequirementType(*f10f0f1f3iter.Type)
						}
						if f10f0f1f3iter.Value != nil {
							f10f0f1f3elem.Value = f10f0f1f3iter.Value
						}
						f10f0f1f3 = append(f10f0f1f3, *f10f0f1f3elem)
					}
					f10f0f1.ResourceRequirements = f10f0f1f3
				}
				f10f0.ContainerOverrides = f10f0f1
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.DependsOn != nil {
				f10f0f2 := []svcsdktypes.BatchJobDependency{}
				for _, f10f0f2iter := range r.ko.Spec.TargetParameters.BatchJobParameters.DependsOn {
					f10f0f2elem := &svcsdktypes.BatchJobDependency{}
					if f10f0f2iter.JobID != nil {
						f10f0f2elem.JobId = f10f0f2iter.JobID
					}
					if f10f0f2iter.Type != nil {
						f10f0f2elem.Type = svcsdktypes.BatchJobDependencyType(*f10f0f2iter.Type)
					}
					f10f0f2 = append(f10f0f2, *f10f0f2elem)
				}
				f10f0.DependsOn = f10f0f2
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.JobDefinition != nil {
				f10f0.JobDefinition = r.ko.Spec.TargetParameters.BatchJobParameters.JobDefinition
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.JobName != nil {
				f10f0.JobName = r.ko.Spec.TargetParameters.BatchJobParameters.JobName
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.Parameters != nil {
				f10f0.Parameters = aws.ToStringMap(r.ko.Spec.TargetParameters.BatchJobParameters.Parameters)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.RetryStrategy != nil {
				f10f0f6 := &svcsdktypes.BatchRetryStrategy{}
				if r.ko.Spec.TargetParameters.BatchJobParameters.RetryStrategy.Attempts != nil {
					attemptsCopy0 := *r.ko.Spec.TargetParameters.BatchJobParameters.RetryStrategy.Attempts
					if attemptsCopy0 > math.MaxInt32 || attemptsCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Attempts is of type int32")
					}
					attemptsCopy := int32(attemptsCopy0)
					f10f0f6.Attempts = &attemptsCopy
				}
				f10f0.RetryStrategy = f10f0f6
			}
			f10.BatchJobParameters = f10f0
		}
		if r.ko.Spec.TargetParameters.CloudWatchLogsParameters != nil {
			f10f1 := &svcsdktypes.PipeTargetCloudWatchLogsParameters{}
			if r.ko.Spec.TargetParameters.CloudWatchLogsParameters.LogStreamName != nil {
				f10f1.LogStreamName = r.ko.Spec.TargetParameters.CloudWatchLogsParameters.LogStreamName
			}
			if r.ko.Spec.TargetParameters.CloudWatchLogsParameters.Timestamp != nil {
				f10f1.Timestamp = r.ko.Spec.TargetParameters.CloudWatchLogsParameters.Timestamp
			}
			f10.CloudWatchLogsParameters = f10f1
		}
		if r.ko.Spec.TargetParameters.ECSTaskParameters != nil {
			f10f2 := &svcsdktypes.PipeTargetEcsTaskParameters{}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.CapacityProviderStrategy != nil {
				f10f2f0 := []svcsdktypes.CapacityProviderStrategyItem{}
				for _, f10f2f0iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.CapacityProviderStrategy {
					f10f2f0elem := &svcsdktypes.CapacityProviderStrategyItem{}
					if f10f2f0iter.Base != nil {
						baseCopy0 := *f10f2f0iter.Base
						if baseCopy0 > math.MaxInt32 || baseCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field base is of type int32")
						}
						baseCopy := int32(baseCopy0)
						f10f2f0elem.Base = baseCopy
					}
					if f10f2f0iter.CapacityProvider != nil {
						f10f2f0elem.CapacityProvider = f10f2f0iter.CapacityProvider
					}
					if f10f2f0iter.Weight != nil {
						weightCopy0 := *f10f2f0iter.Weight
						if weightCopy0 > math.MaxInt32 || weightCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field weight is of type int32")
						}
						weightCopy := int32(weightCopy0)
						f10f2f0elem.Weight = weightCopy
					}
					f10f2f0 = append(f10f2f0, *f10f2f0elem)
				}
				f10f2.CapacityProviderStrategy = f10f2f0
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.EnableECSManagedTags != nil {
				f10f2.EnableECSManagedTags = *r.ko.Spec.TargetParameters.ECSTaskParameters.EnableECSManagedTags
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.EnableExecuteCommand != nil {
				f10f2.EnableExecuteCommand = *r.ko.Spec.TargetParameters.ECSTaskParameters.EnableExecuteCommand
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.Group != nil {
				f10f2.Group = r.ko.Spec.TargetParameters.ECSTaskParameters.Group
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.LaunchType != nil {
				f10f2.LaunchType = svcsdktypes.LaunchType(*r.ko.Spec.TargetParameters.ECSTaskParameters.LaunchType)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration != nil {
				f10f2f5 := &svcsdktypes.NetworkConfiguration{}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration != nil {
					f10f2f5f0 := &svcsdktypes.AwsVpcConfiguration{}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP != nil {
						f10f2f5f0.AssignPublicIp = svcsdktypes.AssignPublicIp(*r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP)
					}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups != nil {
						f10f2f5f0.SecurityGroups = aws.ToStringSlice(r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups)
					}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.Subnets != nil {
						f10f2f5f0.Subnets = aws.ToStringSlice(r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.Subnets)
					}
					f10f2f5.AwsvpcConfiguration = f10f2f5f0
				}
				f10f2.NetworkConfiguration = f10f2f5
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides != nil {
				f10f2f6 := &svcsdktypes.EcsTaskOverride{}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ContainerOverrides != nil {
					f10f2f6f0 := []svcsdktypes.EcsContainerOverride{}
					for _, f10f2f6f0iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ContainerOverrides {
						f10f2f6f0elem := &svcsdktypes.EcsContainerOverride{}
						if f10f2f6f0iter.Command != nil {
							f10f2f6f0elem.Command = aws.ToStringSlice(f10f2f6f0iter.Command)
						}
						if f10f2f6f0iter.CPU != nil {
							cpuCopy0 := *f10f2f6f0iter.CPU
							if cpuCopy0 > math.MaxInt32 || cpuCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field Cpu is of type int32")
							}
							cpuCopy := int32(cpuCopy0)
							f10f2f6f0elem.Cpu = &cpuCopy
						}
						if f10f2f6f0iter.Environment != nil {
							f10f2f6f0elemf2 := []svcsdktypes.EcsEnvironmentVariable{}
							for _, f10f2f6f0elemf2iter := range f10f2f6f0iter.Environment {
								f10f2f6f0elemf2elem := &svcsdktypes.EcsEnvironmentVariable{}
								if f10f2f6f0elemf2iter.Name != nil {
									f10f2f6f0elemf2elem.Name = f10f2f6f0elemf2iter.Name
								}
								if f10f2f6f0elemf2iter.Value != nil {
									f10f2f6f0elemf2elem.Value = f10f2f6f0elemf2iter.Value
								}
								f10f2f6f0elemf2 = append(f10f2f6f0elemf2, *f10f2f6f0elemf2elem)
							}
							f10f2f6f0elem.Environment = f10f2f6f0elemf2
						}
						if f10f2f6f0iter.EnvironmentFiles != nil {
							f10f2f6f0elemf3 := []svcsdktypes.EcsEnvironmentFile{}
							for _, f10f2f6f0elemf3iter := range f10f2f6f0iter.EnvironmentFiles {
								f10f2f6f0elemf3elem := &svcsdktypes.EcsEnvironmentFile{}
								if f10f2f6f0elemf3iter.Type != nil {
									f10f2f6f0elemf3elem.Type = svcsdktypes.EcsEnvironmentFileType(*f10f2f6f0elemf3iter.Type)
								}
								if f10f2f6f0elemf3iter.Value != nil {
									f10f2f6f0elemf3elem.Value = f10f2f6f0elemf3iter.Value
								}
								f10f2f6f0elemf3 = append(f10f2f6f0elemf3, *f10f2f6f0elemf3elem)
							}
							f10f2f6f0elem.EnvironmentFiles = f10f2f6f0elemf3
						}
						if f10f2f6f0iter.Memory != nil {
							memoryCopy0 := *f10f2f6f0iter.Memory
							if memoryCopy0 > math.MaxInt32 || memoryCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field Memory is of type int32")
							}
							memoryCopy := int32(memoryCopy0)
							f10f2f6f0elem.Memory = &memoryCopy
						}
						if f10f2f6f0iter.MemoryReservation != nil {
							memoryReservationCopy0 := *f10f2f6f0iter.MemoryReservation
							if memoryReservationCopy0 > math.MaxInt32 || memoryReservationCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field MemoryReservation is of type int32")
							}
							memoryReservationCopy := int32(memoryReservationCopy0)
							f10f2f6f0elem.MemoryReservation = &memoryReservationCopy
						}
						if f10f2f6f0iter.Name != nil {
							f10f2f6f0elem.Name = f10f2f6f0iter.Name
						}
						if f10f2f6f0iter.ResourceRequirements != nil {
							f10f2f6f0elemf7 := []svcsdktypes.EcsResourceRequirement{}
							for _, f10f2f6f0elemf7iter := range f10f2f6f0iter.ResourceRequirements {
								f10f2f6f0elemf7elem := &svcsdktypes.EcsResourceRequirement{}
								if f10f2f6f0elemf7iter.Type != nil {
									f10f2f6f0elemf7elem.Type = svcsdktypes.EcsResourceRequirementType(*f10f2f6f0elemf7iter.Type)
								}
								if f10f2f6f0elemf7iter.Value != nil {
									f10f2f6f0elemf7elem.Value = f10f2f6f0elemf7iter.Value
								}
								f10f2f6f0elemf7 = append(f10f2f6f0elemf7, *f10f2f6f0elemf7elem)
							}
							f10f2f6f0elem.ResourceRequirements = f10f2f6f0elemf7
						}
						f10f2f6f0 = append(f10f2f6f0, *f10f2f6f0elem)
					}
					f10f2f6.ContainerOverrides = f10f2f6f0
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.CPU != nil {
					f10f2f6.Cpu = r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.CPU
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.EphemeralStorage != nil {
					f10f2f6f2 := &svcsdktypes.EcsEphemeralStorage{}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.EphemeralStorage.SizeInGiB != nil {
						sizeInGiBCopy0 := *r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.EphemeralStorage.SizeInGiB
						if sizeInGiBCopy0 > math.MaxInt32 || sizeInGiBCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field sizeInGiB is of type int32")
						}
						sizeInGiBCopy := int32(sizeInGiBCopy0)
						f10f2f6f2.SizeInGiB = &sizeInGiBCopy
					}
					f10f2f6.EphemeralStorage = f10f2f6f2
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ExecutionRoleARN != nil {
					f10f2f6.ExecutionRoleArn = r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ExecutionRoleARN
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.InferenceAcceleratorOverrides != nil {
					f10f2f6f4 := []svcsdktypes.EcsInferenceAcceleratorOverride{}
					for _, f10f2f6f4iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.InferenceAcceleratorOverrides {
						f10f2f6f4elem := &svcsdktypes.EcsInferenceAcceleratorOverride{}
						if f10f2f6f4iter.DeviceName != nil {
							f10f2f6f4elem.DeviceName = f10f2f6f4iter.DeviceName
						}
						if f10f2f6f4iter.DeviceType != nil {
							f10f2f6f4elem.DeviceType = f10f2f6f4iter.DeviceType
						}
						f10f2f6f4 = append(f10f2f6f4, *f10f2f6f4elem)
					}
					f10f2f6.InferenceAcceleratorOverrides = f10f2f6f4
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.Memory != nil {
					f10f2f6.Memory = r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.Memory
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.TaskRoleARN != nil {
					f10f2f6.TaskRoleArn = r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.TaskRoleARN
				}
				f10f2.Overrides = f10f2f6
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementConstraints != nil {
				f10f2f7 := []svcsdktypes.PlacementConstraint{}
				for _, f10f2f7iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementConstraints {
					f10f2f7elem := &svcsdktypes.PlacementConstraint{}
					if f10f2f7iter.Expression != nil {
						f10f2f7elem.Expression = f10f2f7iter.Expression
					}
					if f10f2f7iter.Type != nil {
						f10f2f7elem.Type = svcsdktypes.PlacementConstraintType(*f10f2f7iter.Type)
					}
					f10f2f7 = append(f10f2f7, *f10f2f7elem)
				}
				f10f2.PlacementConstraints = f10f2f7
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementStrategy != nil {
				f10f2f8 := []svcsdktypes.PlacementStrategy{}
				for _, f10f2f8iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementStrategy {
					f10f2f8elem := &svcsdktypes.PlacementStrategy{}
					if f10f2f8iter.Field != nil {
						f10f2f8elem.Field = f10f2f8iter.Field
					}
					if f10f2f8iter.Type != nil {
						f10f2f8elem.Type = svcsdktypes.PlacementStrategyType(*f10f2f8iter.Type)
					}
					f10f2f8 = append(f10f2f8, *f10f2f8elem)
				}
				f10f2.PlacementStrategy = f10f2f8
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PlatformVersion != nil {
				f10f2.PlatformVersion = r.ko.Spec.TargetParameters.ECSTaskParameters.PlatformVersion
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PropagateTags != nil {
				f10f2.PropagateTags = svcsdktypes.PropagateTags(*r.ko.Spec.TargetParameters.ECSTaskParameters.PropagateTags)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.ReferenceID != nil {
				f10f2.ReferenceId = r.ko.Spec.TargetParameters.ECSTaskParameters.ReferenceID
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.Tags != nil {
				f10f2f12 := []svcsdktypes.Tag{}
				for _, f10f2f12iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.Tags {
					f10f2f12elem := &svcsdktypes.Tag{}
					if f10f2f12iter.Key != nil {
						f10f2f12elem.Key = f10f2f12iter.Key
					}
					if f10f2f12iter.Value != nil {
						f10f2f12elem.Value = f10f2f12iter.Value
					}
					f10f2f12 = append(f10f2f12, *f10f2f12elem)
				}
				f10f2.Tags = f10f2f12
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.TaskCount != nil {
				taskCountCopy0 := *r.ko.Spec.TargetParameters.ECSTaskParameters.TaskCount
				if taskCountCopy0 > math.MaxInt32 || taskCountCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field TaskCount is of type int32")
				}
				taskCountCopy := int32(taskCountCopy0)
				f10f2.TaskCount = &taskCountCopy
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.TaskDefinitionARN != nil {
				f10f2.TaskDefinitionArn = r.ko.Spec.TargetParameters.ECSTaskParameters.TaskDefinitionARN
			}
			f10.EcsTaskParameters = f10f2
		}
		if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters != nil {
			f10f3 := &svcsdktypes.PipeTargetEventBridgeEventBusParameters{}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.DetailType != nil {
				f10f3.DetailType = r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.DetailType
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.EndpointID != nil {
				f10f3.EndpointId = r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.EndpointID
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Resources != nil {
				f10f3.Resources = aws.ToStringSlice(r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Resources)
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Source != nil {
				f10f3.Source = r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Source
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Time != nil {
				f10f3.Time = r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Time
			}
			f10.EventBridgeEventBusParameters = f10f3
		}
		if r.ko.Spec.TargetParameters.HTTPParameters != nil {
			f10f4 := &svcsdktypes.PipeTargetHttpParameters{}
			if r.ko.Spec.TargetParameters.HTTPParameters.HeaderParameters != nil {
				f10f4.HeaderParameters = aws.ToStringMap(r.ko.Spec.TargetParameters.HTTPParameters.HeaderParameters)
			}
			if r.ko.Spec.TargetParameters.HTTPParameters.PathParameterValues != nil {
				f10f4.PathParameterValues = aws.ToStringSlice(r.ko.Spec.TargetParameters.HTTPParameters.PathParameterValues)
			}
			if r.ko.Spec.TargetParameters.HTTPParameters.QueryStringParameters != nil {
				f10f4.QueryStringParameters = aws.ToStringMap(r.ko.Spec.TargetParameters.HTTPParameters.QueryStringParameters)
			}
			f10.HttpParameters = f10f4
		}
		if r.ko.Spec.TargetParameters.InputTemplate != nil {
			f10.InputTemplate = r.ko.Spec.TargetParameters.InputTemplate
		}
		if r.ko.Spec.TargetParameters.KinesisStreamParameters != nil {
			f10f6 := &svcsdktypes.PipeTargetKinesisStreamParameters{}
			if r.ko.Spec.TargetParameters.KinesisStreamParameters.PartitionKey != nil {
				f10f6.PartitionKey = r.ko.Spec.TargetParameters.KinesisStreamParameters.PartitionKey
			}
			f10.KinesisStreamParameters = f10f6
		}
		if r.ko.Spec.TargetParameters.LambdaFunctionParameters != nil {
			f10f7 := &svcsdktypes.PipeTargetLambdaFunctionParameters{}
			if r.ko.Spec.TargetParameters.LambdaFunctionParameters.InvocationType != nil {
				f10f7.InvocationType = svcsdktypes.PipeTargetInvocationType(*r.ko.Spec.TargetParameters.LambdaFunctionParameters.InvocationType)
			}
			f10.LambdaFunctionParameters = f10f7
		}
		if r.ko.Spec.TargetParameters.RedshiftDataParameters != nil {
			f10f8 := &svcsdktypes.PipeTargetRedshiftDataParameters{}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.Database != nil {
				f10f8.Database = r.ko.Spec.TargetParameters.RedshiftDataParameters.Database
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.DBUser != nil {
				f10f8.DbUser = r.ko.Spec.TargetParameters.RedshiftDataParameters.DBUser
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.SecretManagerARN != nil {
				f10f8.SecretManagerArn = r.ko.Spec.TargetParameters.RedshiftDataParameters.SecretManagerARN
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.SQLs != nil {
				f10f8.Sqls = aws.ToStringSlice(r.ko.Spec.TargetParameters.RedshiftDataParameters.SQLs)
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.StatementName != nil {
				f10f8.StatementName = r.ko.Spec.TargetParameters.RedshiftDataParameters.StatementName
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.WithEvent != nil {
				f10f8.WithEvent = *r.ko.Spec.TargetParameters.RedshiftDataParameters.WithEvent
			}
			f10.RedshiftDataParameters = f10f8
		}
		if r.ko.Spec.TargetParameters.SageMakerPipelineParameters != nil {
			f10f9 := &svcsdktypes.PipeTargetSageMakerPipelineParameters{}
			if r.ko.Spec.TargetParameters.SageMakerPipelineParameters.PipelineParameterList != nil {
				f10f9f0 := []svcsdktypes.SageMakerPipelineParameter{}
				for _, f10f9f0iter := range r.ko.Spec.TargetParameters.SageMakerPipelineParameters.PipelineParameterList {
					f10f9f0elem := &svcsdktypes.SageMakerPipelineParameter{}
					if f10f9f0iter.Name != nil {
						f10f9f0elem.Name = f10f9f0iter.Name
					}
					if f10f9f0iter.Value != nil {
						f10f9f0elem.Value = f10f9f0iter.Value
					}
					f10f9f0 = append(f10f9f0, *f10f9f0elem)
				}
				f10f9.PipelineParameterList = f10f9f0
			}
			f10.SageMakerPipelineParameters = f10f9
		}
		if r.ko.Spec.TargetParameters.SQSQueueParameters != nil {
			f10f10 := &svcsdktypes.PipeTargetSqsQueueParameters{}
			if r.ko.Spec.TargetParameters.SQSQueueParameters.MessageDeduplicationID != nil {
				f10f10.MessageDeduplicationId = r.ko.Spec.TargetParameters.SQSQueueParameters.MessageDeduplicationID
			}
			if r.ko.Spec.TargetParameters.SQSQueueParameters.MessageGroupID != nil {
				f10f10.MessageGroupId = r.ko.Spec.TargetParameters.SQSQueueParameters.MessageGroupID
			}
			f10.SqsQueueParameters = f10f10
		}
		if r.ko.Spec.TargetParameters.StepFunctionStateMachineParameters != nil {
			f10f11 := &svcsdktypes.PipeTargetStateMachineParameters{}
			if r.ko.Spec.TargetParameters.StepFunctionStateMachineParameters.InvocationType != nil {
				f10f11.InvocationType = svcsdktypes.PipeTargetInvocationType(*r.ko.Spec.TargetParameters.StepFunctionStateMachineParameters.InvocationType)
			}
			f10.StepFunctionStateMachineParameters = f10f11
		}
		res.TargetParameters = f10
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if pipeInMutatingState(latest) {
		return latest, requeueWaitWhileUpdating
	}

	// hack (continued from delta.go): if there is only a difference in the current
	// and desired state (expressed through non-existing Spec field CurrentState,
	// continuously requeue so we don't block changes to the resources to recover
	// from a FAILED state
	if !delta.DifferentExcept("Spec.CurrentState") {
		return latest, requeueWaitWhileUpdating
	}

	if delta.DifferentAt("Spec.Tags") {
		err = rm.updatePipeTags(ctx, latest, desired)
		if err != nil {
			return nil, err
		}
	}

	// If no other differences were observe, avoid making UpdatePipe API calls.
	if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	// we need to explicitly unset nil spec values
	unsetRemovedSpecFields(delta, desired.ko.Spec, input)

	var resp *svcsdk.UpdatePipeOutput
	_ = resp
	resp, err = rm.sdkapi.UpdatePipe(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdatePipe", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	// always requeue with desired state and return immediately due to eventually
	// consistent API
	return desired, ackrequeue.NeededAfter(nil, defaultRequeueDelay)

	// TODO (@embano1): we can't tell code-gen to not generate the rest of the code

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.CurrentState != "" {
		ko.Status.CurrentState = aws.String(string(resp.CurrentState))
	} else {
		ko.Status.CurrentState = nil
	}
	if resp.DesiredState != "" {
		ko.Spec.DesiredState = aws.String(string(resp.DesiredState))
	} else {
		ko.Spec.DesiredState = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdatePipeInput, error) {
	res := &svcsdk.UpdatePipeInput{}

	if r.ko.Spec.Description != nil {
		res.Description = r.ko.Spec.Description
	}
	if r.ko.Spec.DesiredState != nil {
		res.DesiredState = svcsdktypes.RequestedPipeState(*r.ko.Spec.DesiredState)
	}
	if r.ko.Spec.Enrichment != nil {
		res.Enrichment = r.ko.Spec.Enrichment
	}
	if r.ko.Spec.EnrichmentParameters != nil {
		f3 := &svcsdktypes.PipeEnrichmentParameters{}
		if r.ko.Spec.EnrichmentParameters.HTTPParameters != nil {
			f3f0 := &svcsdktypes.PipeEnrichmentHttpParameters{}
			if r.ko.Spec.EnrichmentParameters.HTTPParameters.HeaderParameters != nil {
				f3f0.HeaderParameters = aws.ToStringMap(r.ko.Spec.EnrichmentParameters.HTTPParameters.HeaderParameters)
			}
			if r.ko.Spec.EnrichmentParameters.HTTPParameters.PathParameterValues != nil {
				f3f0.PathParameterValues = aws.ToStringSlice(r.ko.Spec.EnrichmentParameters.HTTPParameters.PathParameterValues)
			}
			if r.ko.Spec.EnrichmentParameters.HTTPParameters.QueryStringParameters != nil {
				f3f0.QueryStringParameters = aws.ToStringMap(r.ko.Spec.EnrichmentParameters.HTTPParameters.QueryStringParameters)
			}
			f3.HttpParameters = f3f0
		}
		if r.ko.Spec.EnrichmentParameters.InputTemplate != nil {
			f3.InputTemplate = r.ko.Spec.EnrichmentParameters.InputTemplate
		}
		res.EnrichmentParameters = f3
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}
	if r.ko.Spec.RoleARN != nil {
		res.RoleArn = r.ko.Spec.RoleARN
	}
	if r.ko.Spec.SourceParameters != nil {
		f8 := &svcsdktypes.UpdatePipeSourceParameters{}
		if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters != nil {
			f8f0 := &svcsdktypes.UpdatePipeSourceActiveMQBrokerParameters{}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f8f0.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.Credentials != nil {
				var f8f0f1 svcsdktypes.MQBrokerAccessCredentials
				isInterfaceSet := false
				if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.Credentials.BasicAuth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for BasicAuth"))
					}
					f8f0f1f0Parent := &svcsdktypes.MQBrokerAccessCredentialsMemberBasicAuth{}
					f8f0f1f0Parent.Value = *r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.Credentials.BasicAuth
				}
				f8f0.Credentials = f8f0f1
			}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f8f0.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			f8.ActiveMQBrokerParameters = f8f0
		}
		if r.ko.Spec.SourceParameters.DynamoDBStreamParameters != nil {
			f8f1 := &svcsdktypes.UpdatePipeSourceDynamoDBStreamParameters{}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.DynamoDBStreamParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f8f1.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig != nil {
				f8f1f1 := &svcsdktypes.DeadLetterConfig{}
				if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig.ARN != nil {
					f8f1f1.Arn = r.ko.Spec.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig.ARN
				}
				f8f1.DeadLetterConfig = f8f1f1
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f8f1.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRecordAgeInSeconds != nil {
				maximumRecordAgeInSecondsCopy0 := *r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRecordAgeInSeconds
				if maximumRecordAgeInSecondsCopy0 > math.MaxInt32 || maximumRecordAgeInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumRecordAgeInSeconds is of type int32")
				}
				maximumRecordAgeInSecondsCopy := int32(maximumRecordAgeInSecondsCopy0)
				f8f1.MaximumRecordAgeInSeconds = &maximumRecordAgeInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRetryAttempts != nil {
				maximumRetryAttemptsCopy0 := *r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRetryAttempts
				if maximumRetryAttemptsCopy0 > math.MaxInt32 || maximumRetryAttemptsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumRetryAttempts is of type int32")
				}
				maximumRetryAttemptsCopy := int32(maximumRetryAttemptsCopy0)
				f8f1.MaximumRetryAttempts = &maximumRetryAttemptsCopy
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.OnPartialBatchItemFailure != nil {
				f8f1.OnPartialBatchItemFailure = svcsdktypes.OnPartialBatchItemFailureStreams(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.OnPartialBatchItemFailure)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.ParallelizationFactor != nil {
				parallelizationFactorCopy0 := *r.ko.Spec.SourceParameters.DynamoDBStreamParameters.ParallelizationFactor
				if parallelizationFactorCopy0 > math.MaxInt32 || parallelizationFactorCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ParallelizationFactor is of type int32")
				}
				parallelizationFactorCopy := int32(parallelizationFactorCopy0)
				f8f1.ParallelizationFactor = &parallelizationFactorCopy
			}
			f8.DynamoDBStreamParameters = f8f1
		}
		if r.ko.Spec.SourceParameters.FilterCriteria != nil {
			f8f2 := &svcsdktypes.FilterCriteria{}
			if r.ko.Spec.SourceParameters.FilterCriteria.Filters != nil {
				f8f2f0 := []svcsdktypes.Filter{}
				for _, f8f2f0iter := range r.ko.Spec.SourceParameters.FilterCriteria.Filters {
					f8f2f0elem := &svcsdktypes.Filter{}
					if f8f2f0iter.Pattern != nil {
						f8f2f0elem.Pattern = f8f2f0iter.Pattern
					}
					f8f2f0 = append(f8f2f0, *f8f2f0elem)
				}
				f8f2.Filters = f8f2f0
			}
			f8.FilterCriteria = f8f2
		}
		if r.ko.Spec.SourceParameters.KinesisStreamParameters != nil {
			f8f3 := &svcsdktypes.UpdatePipeSourceKinesisStreamParameters{}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.KinesisStreamParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f8f3.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.DeadLetterConfig != nil {
				f8f3f1 := &svcsdktypes.DeadLetterConfig{}
				if r.ko.Spec.SourceParameters.KinesisStreamParameters.DeadLetterConfig.ARN != nil {
					f8f3f1.Arn = r.ko.Spec.SourceParameters.KinesisStreamParameters.DeadLetterConfig.ARN
				}
				f8f3.DeadLetterConfig = f8f3f1
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f8f3.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRecordAgeInSeconds != nil {
				maximumRecordAgeInSecondsCopy0 := *r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRecordAgeInSeconds
				if maximumRecordAgeInSecondsCopy0 > math.MaxInt32 || maximumRecordAgeInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumRecordAgeInSeconds is of type int32")
				}
				maximumRecordAgeInSecondsCopy := int32(maximumRecordAgeInSecondsCopy0)
				f8f3.MaximumRecordAgeInSeconds = &maximumRecordAgeInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRetryAttempts != nil {
				maximumRetryAttemptsCopy0 := *r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRetryAttempts
				if maximumRetryAttemptsCopy0 > math.MaxInt32 || maximumRetryAttemptsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumRetryAttempts is of type int32")
				}
				maximumRetryAttemptsCopy := int32(maximumRetryAttemptsCopy0)
				f8f3.MaximumRetryAttempts = &maximumRetryAttemptsCopy
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.OnPartialBatchItemFailure != nil {
				f8f3.OnPartialBatchItemFailure = svcsdktypes.OnPartialBatchItemFailureStreams(*r.ko.Spec.SourceParameters.KinesisStreamParameters.OnPartialBatchItemFailure)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.ParallelizationFactor != nil {
				parallelizationFactorCopy0 := *r.ko.Spec.SourceParameters.KinesisStreamParameters.ParallelizationFactor
				if parallelizationFactorCopy0 > math.MaxInt32 || parallelizationFactorCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field ParallelizationFactor is of type int32")
				}
				parallelizationFactorCopy := int32(parallelizationFactorCopy0)
				f8f3.ParallelizationFactor = &parallelizationFactorCopy
			}
			f8.KinesisStreamParameters = f8f3
		}
		if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters != nil {
			f8f4 := &svcsdktypes.UpdatePipeSourceManagedStreamingKafkaParameters{}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f8f4.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials != nil {
				var f8f4f1 svcsdktypes.MSKAccessCredentials
				isInterfaceSet := false
				if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.ClientCertificateTLSAuth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for ClientCertificateTlsAuth"))
					}
					f8f4f1f0Parent := &svcsdktypes.MSKAccessCredentialsMemberClientCertificateTlsAuth{}
					f8f4f1f0Parent.Value = *r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.ClientCertificateTLSAuth
				}
				if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.SASLSCRAM512Auth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for SaslScram512Auth"))
					}
					f8f4f1f1Parent := &svcsdktypes.MSKAccessCredentialsMemberSaslScram512Auth{}
					f8f4f1f1Parent.Value = *r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.SASLSCRAM512Auth
				}
				f8f4.Credentials = f8f4f1
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f8f4.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			f8.ManagedStreamingKafkaParameters = f8f4
		}
		if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters != nil {
			f8f5 := &svcsdktypes.UpdatePipeSourceRabbitMQBrokerParameters{}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f8f5.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.Credentials != nil {
				var f8f5f1 svcsdktypes.MQBrokerAccessCredentials
				isInterfaceSet := false
				if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.Credentials.BasicAuth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for BasicAuth"))
					}
					f8f5f1f0Parent := &svcsdktypes.MQBrokerAccessCredentialsMemberBasicAuth{}
					f8f5f1f0Parent.Value = *r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.Credentials.BasicAuth
				}
				f8f5.Credentials = f8f5f1
			}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f8f5.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			f8.RabbitMQBrokerParameters = f8f5
		}
		if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters != nil {
			f8f6 := &svcsdktypes.UpdatePipeSourceSelfManagedKafkaParameters{}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f8f6.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials != nil {
				var f8f6f1 svcsdktypes.SelfManagedKafkaAccessConfigurationCredentials
				isInterfaceSet := false
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.BasicAuth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for BasicAuth"))
					}
					f8f6f1f0Parent := &svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberBasicAuth{}
					f8f6f1f0Parent.Value = *r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.BasicAuth
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.ClientCertificateTLSAuth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for ClientCertificateTlsAuth"))
					}
					f8f6f1f1Parent := &svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberClientCertificateTlsAuth{}
					f8f6f1f1Parent.Value = *r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.ClientCertificateTLSAuth
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM256Auth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for SaslScram256Auth"))
					}
					f8f6f1f2Parent := &svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberSaslScram256Auth{}
					f8f6f1f2Parent.Value = *r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM256Auth
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM512Auth != nil {
					if isInterfaceSet {
						return nil, ackerr.NewTerminalError(fmt.Errorf("can only set one of the members for SaslScram512Auth"))
					}
					f8f6f1f3Parent := &svcsdktypes.SelfManagedKafkaAccessConfigurationCredentialsMemberSaslScram512Auth{}
					f8f6f1f3Parent.Value = *r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM512Auth
				}
				f8f6.Credentials = f8f6f1
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f8f6.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.ServerRootCaCertificate != nil {
				f8f6.ServerRootCaCertificate = r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.ServerRootCaCertificate
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC != nil {
				f8f6f4 := &svcsdktypes.SelfManagedKafkaAccessConfigurationVpc{}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.SecurityGroup != nil {
					f8f6f4.SecurityGroup = aws.ToStringSlice(r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.SecurityGroup)
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.Subnets != nil {
					f8f6f4.Subnets = aws.ToStringSlice(r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.Subnets)
				}
				f8f6.Vpc = f8f6f4
			}
			f8.SelfManagedKafkaParameters = f8f6
		}
		if r.ko.Spec.SourceParameters.SQSQueueParameters != nil {
			f8f7 := &svcsdktypes.UpdatePipeSourceSqsQueueParameters{}
			if r.ko.Spec.SourceParameters.SQSQueueParameters.BatchSize != nil {
				batchSizeCopy0 := *r.ko.Spec.SourceParameters.SQSQueueParameters.BatchSize
				if batchSizeCopy0 > math.MaxInt32 || batchSizeCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field BatchSize is of type int32")
				}
				batchSizeCopy := int32(batchSizeCopy0)
				f8f7.BatchSize = &batchSizeCopy
			}
			if r.ko.Spec.SourceParameters.SQSQueueParameters.MaximumBatchingWindowInSeconds != nil {
				maximumBatchingWindowInSecondsCopy0 := *r.ko.Spec.SourceParameters.SQSQueueParameters.MaximumBatchingWindowInSeconds
				if maximumBatchingWindowInSecondsCopy0 > math.MaxInt32 || maximumBatchingWindowInSecondsCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field MaximumBatchingWindowInSeconds is of type int32")
				}
				maximumBatchingWindowInSecondsCopy := int32(maximumBatchingWindowInSecondsCopy0)
				f8f7.MaximumBatchingWindowInSeconds = &maximumBatchingWindowInSecondsCopy
			}
			f8.SqsQueueParameters = f8f7
		}
		res.SourceParameters = f8
	}
	if r.ko.Spec.Target != nil {
		res.Target = r.ko.Spec.Target
	}
	if r.ko.Spec.TargetParameters != nil {
		f10 := &svcsdktypes.PipeTargetParameters{}
		if r.ko.Spec.TargetParameters.BatchJobParameters != nil {
			f10f0 := &svcsdktypes.PipeTargetBatchJobParameters{}
			if r.ko.Spec.TargetParameters.BatchJobParameters.ArrayProperties != nil {
				f10f0f0 := &svcsdktypes.BatchArrayProperties{}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ArrayProperties.Size != nil {
					sizeCopy0 := *r.ko.Spec.TargetParameters.BatchJobParameters.ArrayProperties.Size
					if sizeCopy0 > math.MaxInt32 || sizeCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Size is of type int32")
					}
					sizeCopy := int32(sizeCopy0)
					f10f0f0.Size = &sizeCopy
				}
				f10f0.ArrayProperties = f10f0f0
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides != nil {
				f10f0f1 := &svcsdktypes.BatchContainerOverrides{}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Command != nil {
					f10f0f1.Command = aws.ToStringSlice(r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Command)
				}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Environment != nil {
					f10f0f1f1 := []svcsdktypes.BatchEnvironmentVariable{}
					for _, f10f0f1f1iter := range r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Environment {
						f10f0f1f1elem := &svcsdktypes.BatchEnvironmentVariable{}
						if f10f0f1f1iter.Name != nil {
							f10f0f1f1elem.Name = f10f0f1f1iter.Name
						}
						if f10f0f1f1iter.Value != nil {
							f10f0f1f1elem.Value = f10f0f1f1iter.Value
						}
						f10f0f1f1 = append(f10f0f1f1, *f10f0f1f1elem)
					}
					f10f0f1.Environment = f10f0f1f1
				}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.InstanceType != nil {
					f10f0f1.InstanceType = r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.InstanceType
				}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.ResourceRequirements != nil {
					f10f0f1f3 := []svcsdktypes.BatchResourceRequirement{}
					for _, f10f0f1f3iter := range r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.ResourceRequirements {
						f10f0f1f3elem := &svcsdktypes.BatchResourceRequirement{}
						if f10f0f1f3iter.Type != nil {
							f10f0f1f3elem.Type = svcsdktypes.BatchResourceRequirementType(*f10f0f1f3iter.Type)
						}
						if f10f0f1f3iter.Value != nil {
							f10f0f1f3elem.Value = f10f0f1f3iter.Value
						}
						f10f0f1f3 = append(f10f0f1f3, *f10f0f1f3elem)
					}
					f10f0f1.ResourceRequirements = f10f0f1f3
				}
				f10f0.ContainerOverrides = f10f0f1
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.DependsOn != nil {
				f10f0f2 := []svcsdktypes.BatchJobDependency{}
				for _, f10f0f2iter := range r.ko.Spec.TargetParameters.BatchJobParameters.DependsOn {
					f10f0f2elem := &svcsdktypes.BatchJobDependency{}
					if f10f0f2iter.JobID != nil {
						f10f0f2elem.JobId = f10f0f2iter.JobID
					}
					if f10f0f2iter.Type != nil {
						f10f0f2elem.Type = svcsdktypes.BatchJobDependencyType(*f10f0f2iter.Type)
					}
					f10f0f2 = append(f10f0f2, *f10f0f2elem)
				}
				f10f0.DependsOn = f10f0f2
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.JobDefinition != nil {
				f10f0.JobDefinition = r.ko.Spec.TargetParameters.BatchJobParameters.JobDefinition
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.JobName != nil {
				f10f0.JobName = r.ko.Spec.TargetParameters.BatchJobParameters.JobName
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.Parameters != nil {
				f10f0.Parameters = aws.ToStringMap(r.ko.Spec.TargetParameters.BatchJobParameters.Parameters)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.RetryStrategy != nil {
				f10f0f6 := &svcsdktypes.BatchRetryStrategy{}
				if r.ko.Spec.TargetParameters.BatchJobParameters.RetryStrategy.Attempts != nil {
					attemptsCopy0 := *r.ko.Spec.TargetParameters.BatchJobParameters.RetryStrategy.Attempts
					if attemptsCopy0 > math.MaxInt32 || attemptsCopy0 < math.MinInt32 {
						return nil, fmt.Errorf("error: field Attempts is of type int32")
					}
					attemptsCopy := int32(attemptsCopy0)
					f10f0f6.Attempts = &attemptsCopy
				}
				f10f0.RetryStrategy = f10f0f6
			}
			f10.BatchJobParameters = f10f0
		}
		if r.ko.Spec.TargetParameters.CloudWatchLogsParameters != nil {
			f10f1 := &svcsdktypes.PipeTargetCloudWatchLogsParameters{}
			if r.ko.Spec.TargetParameters.CloudWatchLogsParameters.LogStreamName != nil {
				f10f1.LogStreamName = r.ko.Spec.TargetParameters.CloudWatchLogsParameters.LogStreamName
			}
			if r.ko.Spec.TargetParameters.CloudWatchLogsParameters.Timestamp != nil {
				f10f1.Timestamp = r.ko.Spec.TargetParameters.CloudWatchLogsParameters.Timestamp
			}
			f10.CloudWatchLogsParameters = f10f1
		}
		if r.ko.Spec.TargetParameters.ECSTaskParameters != nil {
			f10f2 := &svcsdktypes.PipeTargetEcsTaskParameters{}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.CapacityProviderStrategy != nil {
				f10f2f0 := []svcsdktypes.CapacityProviderStrategyItem{}
				for _, f10f2f0iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.CapacityProviderStrategy {
					f10f2f0elem := &svcsdktypes.CapacityProviderStrategyItem{}
					if f10f2f0iter.Base != nil {
						baseCopy0 := *f10f2f0iter.Base
						if baseCopy0 > math.MaxInt32 || baseCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field base is of type int32")
						}
						baseCopy := int32(baseCopy0)
						f10f2f0elem.Base = baseCopy
					}
					if f10f2f0iter.CapacityProvider != nil {
						f10f2f0elem.CapacityProvider = f10f2f0iter.CapacityProvider
					}
					if f10f2f0iter.Weight != nil {
						weightCopy0 := *f10f2f0iter.Weight
						if weightCopy0 > math.MaxInt32 || weightCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field weight is of type int32")
						}
						weightCopy := int32(weightCopy0)
						f10f2f0elem.Weight = weightCopy
					}
					f10f2f0 = append(f10f2f0, *f10f2f0elem)
				}
				f10f2.CapacityProviderStrategy = f10f2f0
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.EnableECSManagedTags != nil {
				f10f2.EnableECSManagedTags = *r.ko.Spec.TargetParameters.ECSTaskParameters.EnableECSManagedTags
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.EnableExecuteCommand != nil {
				f10f2.EnableExecuteCommand = *r.ko.Spec.TargetParameters.ECSTaskParameters.EnableExecuteCommand
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.Group != nil {
				f10f2.Group = r.ko.Spec.TargetParameters.ECSTaskParameters.Group
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.LaunchType != nil {
				f10f2.LaunchType = svcsdktypes.LaunchType(*r.ko.Spec.TargetParameters.ECSTaskParameters.LaunchType)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration != nil {
				f10f2f5 := &svcsdktypes.NetworkConfiguration{}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration != nil {
					f10f2f5f0 := &svcsdktypes.AwsVpcConfiguration{}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP != nil {
						f10f2f5f0.AssignPublicIp = svcsdktypes.AssignPublicIp(*r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP)
					}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups != nil {
						f10f2f5f0.SecurityGroups = aws.ToStringSlice(r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups)
					}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.Subnets != nil {
						f10f2f5f0.Subnets = aws.ToStringSlice(r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.Subnets)
					}
					f10f2f5.AwsvpcConfiguration = f10f2f5f0
				}
				f10f2.NetworkConfiguration = f10f2f5
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides != nil {
				f10f2f6 := &svcsdktypes.EcsTaskOverride{}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ContainerOverrides != nil {
					f10f2f6f0 := []svcsdktypes.EcsContainerOverride{}
					for _, f10f2f6f0iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ContainerOverrides {
						f10f2f6f0elem := &svcsdktypes.EcsContainerOverride{}
						if f10f2f6f0iter.Command != nil {
							f10f2f6f0elem.Command = aws.ToStringSlice(f10f2f6f0iter.Command)
						}
						if f10f2f6f0iter.CPU != nil {
							cpuCopy0 := *f10f2f6f0iter.CPU
							if cpuCopy0 > math.MaxInt32 || cpuCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field Cpu is of type int32")
							}
							cpuCopy := int32(cpuCopy0)
							f10f2f6f0elem.Cpu = &cpuCopy
						}
						if f10f2f6f0iter.Environment != nil {
							f10f2f6f0elemf2 := []svcsdktypes.EcsEnvironmentVariable{}
							for _, f10f2f6f0elemf2iter := range f10f2f6f0iter.Environment {
								f10f2f6f0elemf2elem := &svcsdktypes.EcsEnvironmentVariable{}
								if f10f2f6f0elemf2iter.Name != nil {
									f10f2f6f0elemf2elem.Name = f10f2f6f0elemf2iter.Name
								}
								if f10f2f6f0elemf2iter.Value != nil {
									f10f2f6f0elemf2elem.Value = f10f2f6f0elemf2iter.Value
								}
								f10f2f6f0elemf2 = append(f10f2f6f0elemf2, *f10f2f6f0elemf2elem)
							}
							f10f2f6f0elem.Environment = f10f2f6f0elemf2
						}
						if f10f2f6f0iter.EnvironmentFiles != nil {
							f10f2f6f0elemf3 := []svcsdktypes.EcsEnvironmentFile{}
							for _, f10f2f6f0elemf3iter := range f10f2f6f0iter.EnvironmentFiles {
								f10f2f6f0elemf3elem := &svcsdktypes.EcsEnvironmentFile{}
								if f10f2f6f0elemf3iter.Type != nil {
									f10f2f6f0elemf3elem.Type = svcsdktypes.EcsEnvironmentFileType(*f10f2f6f0elemf3iter.Type)
								}
								if f10f2f6f0elemf3iter.Value != nil {
									f10f2f6f0elemf3elem.Value = f10f2f6f0elemf3iter.Value
								}
								f10f2f6f0elemf3 = append(f10f2f6f0elemf3, *f10f2f6f0elemf3elem)
							}
							f10f2f6f0elem.EnvironmentFiles = f10f2f6f0elemf3
						}
						if f10f2f6f0iter.Memory != nil {
							memoryCopy0 := *f10f2f6f0iter.Memory
							if memoryCopy0 > math.MaxInt32 || memoryCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field Memory is of type int32")
							}
							memoryCopy := int32(memoryCopy0)
							f10f2f6f0elem.Memory = &memoryCopy
						}
						if f10f2f6f0iter.MemoryReservation != nil {
							memoryReservationCopy0 := *f10f2f6f0iter.MemoryReservation
							if memoryReservationCopy0 > math.MaxInt32 || memoryReservationCopy0 < math.MinInt32 {
								return nil, fmt.Errorf("error: field MemoryReservation is of type int32")
							}
							memoryReservationCopy := int32(memoryReservationCopy0)
							f10f2f6f0elem.MemoryReservation = &memoryReservationCopy
						}
						if f10f2f6f0iter.Name != nil {
							f10f2f6f0elem.Name = f10f2f6f0iter.Name
						}
						if f10f2f6f0iter.ResourceRequirements != nil {
							f10f2f6f0elemf7 := []svcsdktypes.EcsResourceRequirement{}
							for _, f10f2f6f0elemf7iter := range f10f2f6f0iter.ResourceRequirements {
								f10f2f6f0elemf7elem := &svcsdktypes.EcsResourceRequirement{}
								if f10f2f6f0elemf7iter.Type != nil {
									f10f2f6f0elemf7elem.Type = svcsdktypes.EcsResourceRequirementType(*f10f2f6f0elemf7iter.Type)
								}
								if f10f2f6f0elemf7iter.Value != nil {
									f10f2f6f0elemf7elem.Value = f10f2f6f0elemf7iter.Value
								}
								f10f2f6f0elemf7 = append(f10f2f6f0elemf7, *f10f2f6f0elemf7elem)
							}
							f10f2f6f0elem.ResourceRequirements = f10f2f6f0elemf7
						}
						f10f2f6f0 = append(f10f2f6f0, *f10f2f6f0elem)
					}
					f10f2f6.ContainerOverrides = f10f2f6f0
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.CPU != nil {
					f10f2f6.Cpu = r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.CPU
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.EphemeralStorage != nil {
					f10f2f6f2 := &svcsdktypes.EcsEphemeralStorage{}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.EphemeralStorage.SizeInGiB != nil {
						sizeInGiBCopy0 := *r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.EphemeralStorage.SizeInGiB
						if sizeInGiBCopy0 > math.MaxInt32 || sizeInGiBCopy0 < math.MinInt32 {
							return nil, fmt.Errorf("error: field sizeInGiB is of type int32")
						}
						sizeInGiBCopy := int32(sizeInGiBCopy0)
						f10f2f6f2.SizeInGiB = &sizeInGiBCopy
					}
					f10f2f6.EphemeralStorage = f10f2f6f2
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ExecutionRoleARN != nil {
					f10f2f6.ExecutionRoleArn = r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ExecutionRoleARN
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.InferenceAcceleratorOverrides != nil {
					f10f2f6f4 := []svcsdktypes.EcsInferenceAcceleratorOverride{}
					for _, f10f2f6f4iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.InferenceAcceleratorOverrides {
						f10f2f6f4elem := &svcsdktypes.EcsInferenceAcceleratorOverride{}
						if f10f2f6f4iter.DeviceName != nil {
							f10f2f6f4elem.DeviceName = f10f2f6f4iter.DeviceName
						}
						if f10f2f6f4iter.DeviceType != nil {
							f10f2f6f4elem.DeviceType = f10f2f6f4iter.DeviceType
						}
						f10f2f6f4 = append(f10f2f6f4, *f10f2f6f4elem)
					}
					f10f2f6.InferenceAcceleratorOverrides = f10f2f6f4
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.Memory != nil {
					f10f2f6.Memory = r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.Memory
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.TaskRoleARN != nil {
					f10f2f6.TaskRoleArn = r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.TaskRoleARN
				}
				f10f2.Overrides = f10f2f6
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementConstraints != nil {
				f10f2f7 := []svcsdktypes.PlacementConstraint{}
				for _, f10f2f7iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementConstraints {
					f10f2f7elem := &svcsdktypes.PlacementConstraint{}
					if f10f2f7iter.Expression != nil {
						f10f2f7elem.Expression = f10f2f7iter.Expression
					}
					if f10f2f7iter.Type != nil {
						f10f2f7elem.Type = svcsdktypes.PlacementConstraintType(*f10f2f7iter.Type)
					}
					f10f2f7 = append(f10f2f7, *f10f2f7elem)
				}
				f10f2.PlacementConstraints = f10f2f7
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementStrategy != nil {
				f10f2f8 := []svcsdktypes.PlacementStrategy{}
				for _, f10f2f8iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementStrategy {
					f10f2f8elem := &svcsdktypes.PlacementStrategy{}
					if f10f2f8iter.Field != nil {
						f10f2f8elem.Field = f10f2f8iter.Field
					}
					if f10f2f8iter.Type != nil {
						f10f2f8elem.Type = svcsdktypes.PlacementStrategyType(*f10f2f8iter.Type)
					}
					f10f2f8 = append(f10f2f8, *f10f2f8elem)
				}
				f10f2.PlacementStrategy = f10f2f8
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PlatformVersion != nil {
				f10f2.PlatformVersion = r.ko.Spec.TargetParameters.ECSTaskParameters.PlatformVersion
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PropagateTags != nil {
				f10f2.PropagateTags = svcsdktypes.PropagateTags(*r.ko.Spec.TargetParameters.ECSTaskParameters.PropagateTags)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.ReferenceID != nil {
				f10f2.ReferenceId = r.ko.Spec.TargetParameters.ECSTaskParameters.ReferenceID
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.Tags != nil {
				f10f2f12 := []svcsdktypes.Tag{}
				for _, f10f2f12iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.Tags {
					f10f2f12elem := &svcsdktypes.Tag{}
					if f10f2f12iter.Key != nil {
						f10f2f12elem.Key = f10f2f12iter.Key
					}
					if f10f2f12iter.Value != nil {
						f10f2f12elem.Value = f10f2f12iter.Value
					}
					f10f2f12 = append(f10f2f12, *f10f2f12elem)
				}
				f10f2.Tags = f10f2f12
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.TaskCount != nil {
				taskCountCopy0 := *r.ko.Spec.TargetParameters.ECSTaskParameters.TaskCount
				if taskCountCopy0 > math.MaxInt32 || taskCountCopy0 < math.MinInt32 {
					return nil, fmt.Errorf("error: field TaskCount is of type int32")
				}
				taskCountCopy := int32(taskCountCopy0)
				f10f2.TaskCount = &taskCountCopy
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.TaskDefinitionARN != nil {
				f10f2.TaskDefinitionArn = r.ko.Spec.TargetParameters.ECSTaskParameters.TaskDefinitionARN
			}
			f10.EcsTaskParameters = f10f2
		}
		if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters != nil {
			f10f3 := &svcsdktypes.PipeTargetEventBridgeEventBusParameters{}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.DetailType != nil {
				f10f3.DetailType = r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.DetailType
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.EndpointID != nil {
				f10f3.EndpointId = r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.EndpointID
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Resources != nil {
				f10f3.Resources = aws.ToStringSlice(r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Resources)
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Source != nil {
				f10f3.Source = r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Source
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Time != nil {
				f10f3.Time = r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Time
			}
			f10.EventBridgeEventBusParameters = f10f3
		}
		if r.ko.Spec.TargetParameters.HTTPParameters != nil {
			f10f4 := &svcsdktypes.PipeTargetHttpParameters{}
			if r.ko.Spec.TargetParameters.HTTPParameters.HeaderParameters != nil {
				f10f4.HeaderParameters = aws.ToStringMap(r.ko.Spec.TargetParameters.HTTPParameters.HeaderParameters)
			}
			if r.ko.Spec.TargetParameters.HTTPParameters.PathParameterValues != nil {
				f10f4.PathParameterValues = aws.ToStringSlice(r.ko.Spec.TargetParameters.HTTPParameters.PathParameterValues)
			}
			if r.ko.Spec.TargetParameters.HTTPParameters.QueryStringParameters != nil {
				f10f4.QueryStringParameters = aws.ToStringMap(r.ko.Spec.TargetParameters.HTTPParameters.QueryStringParameters)
			}
			f10.HttpParameters = f10f4
		}
		if r.ko.Spec.TargetParameters.InputTemplate != nil {
			f10.InputTemplate = r.ko.Spec.TargetParameters.InputTemplate
		}
		if r.ko.Spec.TargetParameters.KinesisStreamParameters != nil {
			f10f6 := &svcsdktypes.PipeTargetKinesisStreamParameters{}
			if r.ko.Spec.TargetParameters.KinesisStreamParameters.PartitionKey != nil {
				f10f6.PartitionKey = r.ko.Spec.TargetParameters.KinesisStreamParameters.PartitionKey
			}
			f10.KinesisStreamParameters = f10f6
		}
		if r.ko.Spec.TargetParameters.LambdaFunctionParameters != nil {
			f10f7 := &svcsdktypes.PipeTargetLambdaFunctionParameters{}
			if r.ko.Spec.TargetParameters.LambdaFunctionParameters.InvocationType != nil {
				f10f7.InvocationType = svcsdktypes.PipeTargetInvocationType(*r.ko.Spec.TargetParameters.LambdaFunctionParameters.InvocationType)
			}
			f10.LambdaFunctionParameters = f10f7
		}
		if r.ko.Spec.TargetParameters.RedshiftDataParameters != nil {
			f10f8 := &svcsdktypes.PipeTargetRedshiftDataParameters{}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.Database != nil {
				f10f8.Database = r.ko.Spec.TargetParameters.RedshiftDataParameters.Database
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.DBUser != nil {
				f10f8.DbUser = r.ko.Spec.TargetParameters.RedshiftDataParameters.DBUser
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.SecretManagerARN != nil {
				f10f8.SecretManagerArn = r.ko.Spec.TargetParameters.RedshiftDataParameters.SecretManagerARN
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.SQLs != nil {
				f10f8.Sqls = aws.ToStringSlice(r.ko.Spec.TargetParameters.RedshiftDataParameters.SQLs)
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.StatementName != nil {
				f10f8.StatementName = r.ko.Spec.TargetParameters.RedshiftDataParameters.StatementName
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.WithEvent != nil {
				f10f8.WithEvent = *r.ko.Spec.TargetParameters.RedshiftDataParameters.WithEvent
			}
			f10.RedshiftDataParameters = f10f8
		}
		if r.ko.Spec.TargetParameters.SageMakerPipelineParameters != nil {
			f10f9 := &svcsdktypes.PipeTargetSageMakerPipelineParameters{}
			if r.ko.Spec.TargetParameters.SageMakerPipelineParameters.PipelineParameterList != nil {
				f10f9f0 := []svcsdktypes.SageMakerPipelineParameter{}
				for _, f10f9f0iter := range r.ko.Spec.TargetParameters.SageMakerPipelineParameters.PipelineParameterList {
					f10f9f0elem := &svcsdktypes.SageMakerPipelineParameter{}
					if f10f9f0iter.Name != nil {
						f10f9f0elem.Name = f10f9f0iter.Name
					}
					if f10f9f0iter.Value != nil {
						f10f9f0elem.Value = f10f9f0iter.Value
					}
					f10f9f0 = append(f10f9f0, *f10f9f0elem)
				}
				f10f9.PipelineParameterList = f10f9f0
			}
			f10.SageMakerPipelineParameters = f10f9
		}
		if r.ko.Spec.TargetParameters.SQSQueueParameters != nil {
			f10f10 := &svcsdktypes.PipeTargetSqsQueueParameters{}
			if r.ko.Spec.TargetParameters.SQSQueueParameters.MessageDeduplicationID != nil {
				f10f10.MessageDeduplicationId = r.ko.Spec.TargetParameters.SQSQueueParameters.MessageDeduplicationID
			}
			if r.ko.Spec.TargetParameters.SQSQueueParameters.MessageGroupID != nil {
				f10f10.MessageGroupId = r.ko.Spec.TargetParameters.SQSQueueParameters.MessageGroupID
			}
			f10.SqsQueueParameters = f10f10
		}
		if r.ko.Spec.TargetParameters.StepFunctionStateMachineParameters != nil {
			f10f11 := &svcsdktypes.PipeTargetStateMachineParameters{}
			if r.ko.Spec.TargetParameters.StepFunctionStateMachineParameters.InvocationType != nil {
				f10f11.InvocationType = svcsdktypes.PipeTargetInvocationType(*r.ko.Spec.TargetParameters.StepFunctionStateMachineParameters.InvocationType)
			}
			f10.StepFunctionStateMachineParameters = f10f11
		}
		res.TargetParameters = f10
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeletePipeOutput
	_ = resp
	resp, err = rm.sdkapi.DeletePipe(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeletePipe", err)
	// always requeue if API call succeeded due to eventually consistent state
	// transitions
	if err == nil {
		return r, requeueWaitWhileDeleting
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeletePipeInput, error) {
	res := &svcsdk.DeletePipeInput{}

	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Pipe,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}

	var terminalErr smithy.APIError
	if !errors.As(err, &terminalErr) {
		return false
	}
	switch terminalErr.ErrorCode() {
	case "ValidationException":
		return true
	default:
		return false
	}
}
