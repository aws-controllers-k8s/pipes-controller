// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package pipe

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/pipes"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/pipes-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.Pipes{}
	_ = &svcapitypes.Pipe{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribePipeOutput
	resp, err = rm.sdkapi.DescribePipeWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribePipe", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "NotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.CurrentState != nil {
		ko.Status.CurrentState = resp.CurrentState
	} else {
		ko.Status.CurrentState = nil
	}
	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.DesiredState != nil {
		ko.Spec.DesiredState = resp.DesiredState
	} else {
		ko.Spec.DesiredState = nil
	}
	if resp.Enrichment != nil {
		ko.Spec.Enrichment = resp.Enrichment
	} else {
		ko.Spec.Enrichment = nil
	}
	if resp.EnrichmentParameters != nil {
		f6 := &svcapitypes.PipeEnrichmentParameters{}
		if resp.EnrichmentParameters.HttpParameters != nil {
			f6f0 := &svcapitypes.PipeEnrichmentHTTPParameters{}
			if resp.EnrichmentParameters.HttpParameters.HeaderParameters != nil {
				f6f0f0 := map[string]*string{}
				for f6f0f0key, f6f0f0valiter := range resp.EnrichmentParameters.HttpParameters.HeaderParameters {
					var f6f0f0val string
					f6f0f0val = *f6f0f0valiter
					f6f0f0[f6f0f0key] = &f6f0f0val
				}
				f6f0.HeaderParameters = f6f0f0
			}
			if resp.EnrichmentParameters.HttpParameters.PathParameterValues != nil {
				f6f0f1 := []*string{}
				for _, f6f0f1iter := range resp.EnrichmentParameters.HttpParameters.PathParameterValues {
					var f6f0f1elem string
					f6f0f1elem = *f6f0f1iter
					f6f0f1 = append(f6f0f1, &f6f0f1elem)
				}
				f6f0.PathParameterValues = f6f0f1
			}
			if resp.EnrichmentParameters.HttpParameters.QueryStringParameters != nil {
				f6f0f2 := map[string]*string{}
				for f6f0f2key, f6f0f2valiter := range resp.EnrichmentParameters.HttpParameters.QueryStringParameters {
					var f6f0f2val string
					f6f0f2val = *f6f0f2valiter
					f6f0f2[f6f0f2key] = &f6f0f2val
				}
				f6f0.QueryStringParameters = f6f0f2
			}
			f6.HTTPParameters = f6f0
		}
		if resp.EnrichmentParameters.InputTemplate != nil {
			f6.InputTemplate = resp.EnrichmentParameters.InputTemplate
		}
		ko.Spec.EnrichmentParameters = f6
	} else {
		ko.Spec.EnrichmentParameters = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.RoleArn != nil {
		ko.Spec.RoleARN = resp.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.Source != nil {
		ko.Spec.Source = resp.Source
	} else {
		ko.Spec.Source = nil
	}
	if resp.SourceParameters != nil {
		f11 := &svcapitypes.PipeSourceParameters{}
		if resp.SourceParameters.ActiveMQBrokerParameters != nil {
			f11f0 := &svcapitypes.PipeSourceActiveMQBrokerParameters{}
			if resp.SourceParameters.ActiveMQBrokerParameters.BatchSize != nil {
				f11f0.BatchSize = resp.SourceParameters.ActiveMQBrokerParameters.BatchSize
			}
			if resp.SourceParameters.ActiveMQBrokerParameters.Credentials != nil {
				f11f0f1 := &svcapitypes.MQBrokerAccessCredentials{}
				if resp.SourceParameters.ActiveMQBrokerParameters.Credentials.BasicAuth != nil {
					f11f0f1.BasicAuth = resp.SourceParameters.ActiveMQBrokerParameters.Credentials.BasicAuth
				}
				f11f0.Credentials = f11f0f1
			}
			if resp.SourceParameters.ActiveMQBrokerParameters.MaximumBatchingWindowInSeconds != nil {
				f11f0.MaximumBatchingWindowInSeconds = resp.SourceParameters.ActiveMQBrokerParameters.MaximumBatchingWindowInSeconds
			}
			if resp.SourceParameters.ActiveMQBrokerParameters.QueueName != nil {
				f11f0.QueueName = resp.SourceParameters.ActiveMQBrokerParameters.QueueName
			}
			f11.ActiveMQBrokerParameters = f11f0
		}
		if resp.SourceParameters.DynamoDBStreamParameters != nil {
			f11f1 := &svcapitypes.PipeSourceDynamoDBStreamParameters{}
			if resp.SourceParameters.DynamoDBStreamParameters.BatchSize != nil {
				f11f1.BatchSize = resp.SourceParameters.DynamoDBStreamParameters.BatchSize
			}
			if resp.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig != nil {
				f11f1f1 := &svcapitypes.DeadLetterConfig{}
				if resp.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig.Arn != nil {
					f11f1f1.ARN = resp.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig.Arn
				}
				f11f1.DeadLetterConfig = f11f1f1
			}
			if resp.SourceParameters.DynamoDBStreamParameters.MaximumBatchingWindowInSeconds != nil {
				f11f1.MaximumBatchingWindowInSeconds = resp.SourceParameters.DynamoDBStreamParameters.MaximumBatchingWindowInSeconds
			}
			if resp.SourceParameters.DynamoDBStreamParameters.MaximumRecordAgeInSeconds != nil {
				f11f1.MaximumRecordAgeInSeconds = resp.SourceParameters.DynamoDBStreamParameters.MaximumRecordAgeInSeconds
			}
			if resp.SourceParameters.DynamoDBStreamParameters.MaximumRetryAttempts != nil {
				f11f1.MaximumRetryAttempts = resp.SourceParameters.DynamoDBStreamParameters.MaximumRetryAttempts
			}
			if resp.SourceParameters.DynamoDBStreamParameters.OnPartialBatchItemFailure != nil {
				f11f1.OnPartialBatchItemFailure = resp.SourceParameters.DynamoDBStreamParameters.OnPartialBatchItemFailure
			}
			if resp.SourceParameters.DynamoDBStreamParameters.ParallelizationFactor != nil {
				f11f1.ParallelizationFactor = resp.SourceParameters.DynamoDBStreamParameters.ParallelizationFactor
			}
			if resp.SourceParameters.DynamoDBStreamParameters.StartingPosition != nil {
				f11f1.StartingPosition = resp.SourceParameters.DynamoDBStreamParameters.StartingPosition
			}
			f11.DynamoDBStreamParameters = f11f1
		}
		if resp.SourceParameters.FilterCriteria != nil {
			f11f2 := &svcapitypes.FilterCriteria{}
			if resp.SourceParameters.FilterCriteria.Filters != nil {
				f11f2f0 := []*svcapitypes.Filter{}
				for _, f11f2f0iter := range resp.SourceParameters.FilterCriteria.Filters {
					f11f2f0elem := &svcapitypes.Filter{}
					if f11f2f0iter.Pattern != nil {
						f11f2f0elem.Pattern = f11f2f0iter.Pattern
					}
					f11f2f0 = append(f11f2f0, f11f2f0elem)
				}
				f11f2.Filters = f11f2f0
			}
			f11.FilterCriteria = f11f2
		}
		if resp.SourceParameters.KinesisStreamParameters != nil {
			f11f3 := &svcapitypes.PipeSourceKinesisStreamParameters{}
			if resp.SourceParameters.KinesisStreamParameters.BatchSize != nil {
				f11f3.BatchSize = resp.SourceParameters.KinesisStreamParameters.BatchSize
			}
			if resp.SourceParameters.KinesisStreamParameters.DeadLetterConfig != nil {
				f11f3f1 := &svcapitypes.DeadLetterConfig{}
				if resp.SourceParameters.KinesisStreamParameters.DeadLetterConfig.Arn != nil {
					f11f3f1.ARN = resp.SourceParameters.KinesisStreamParameters.DeadLetterConfig.Arn
				}
				f11f3.DeadLetterConfig = f11f3f1
			}
			if resp.SourceParameters.KinesisStreamParameters.MaximumBatchingWindowInSeconds != nil {
				f11f3.MaximumBatchingWindowInSeconds = resp.SourceParameters.KinesisStreamParameters.MaximumBatchingWindowInSeconds
			}
			if resp.SourceParameters.KinesisStreamParameters.MaximumRecordAgeInSeconds != nil {
				f11f3.MaximumRecordAgeInSeconds = resp.SourceParameters.KinesisStreamParameters.MaximumRecordAgeInSeconds
			}
			if resp.SourceParameters.KinesisStreamParameters.MaximumRetryAttempts != nil {
				f11f3.MaximumRetryAttempts = resp.SourceParameters.KinesisStreamParameters.MaximumRetryAttempts
			}
			if resp.SourceParameters.KinesisStreamParameters.OnPartialBatchItemFailure != nil {
				f11f3.OnPartialBatchItemFailure = resp.SourceParameters.KinesisStreamParameters.OnPartialBatchItemFailure
			}
			if resp.SourceParameters.KinesisStreamParameters.ParallelizationFactor != nil {
				f11f3.ParallelizationFactor = resp.SourceParameters.KinesisStreamParameters.ParallelizationFactor
			}
			if resp.SourceParameters.KinesisStreamParameters.StartingPosition != nil {
				f11f3.StartingPosition = resp.SourceParameters.KinesisStreamParameters.StartingPosition
			}
			if resp.SourceParameters.KinesisStreamParameters.StartingPositionTimestamp != nil {
				f11f3.StartingPositionTimestamp = &metav1.Time{*resp.SourceParameters.KinesisStreamParameters.StartingPositionTimestamp}
			}
			f11.KinesisStreamParameters = f11f3
		}
		if resp.SourceParameters.ManagedStreamingKafkaParameters != nil {
			f11f4 := &svcapitypes.PipeSourceManagedStreamingKafkaParameters{}
			if resp.SourceParameters.ManagedStreamingKafkaParameters.BatchSize != nil {
				f11f4.BatchSize = resp.SourceParameters.ManagedStreamingKafkaParameters.BatchSize
			}
			if resp.SourceParameters.ManagedStreamingKafkaParameters.ConsumerGroupID != nil {
				f11f4.ConsumerGroupID = resp.SourceParameters.ManagedStreamingKafkaParameters.ConsumerGroupID
			}
			if resp.SourceParameters.ManagedStreamingKafkaParameters.Credentials != nil {
				f11f4f2 := &svcapitypes.MSKAccessCredentials{}
				if resp.SourceParameters.ManagedStreamingKafkaParameters.Credentials.ClientCertificateTlsAuth != nil {
					f11f4f2.ClientCertificateTLSAuth = resp.SourceParameters.ManagedStreamingKafkaParameters.Credentials.ClientCertificateTlsAuth
				}
				if resp.SourceParameters.ManagedStreamingKafkaParameters.Credentials.SaslScram512Auth != nil {
					f11f4f2.SASLSCRAM512Auth = resp.SourceParameters.ManagedStreamingKafkaParameters.Credentials.SaslScram512Auth
				}
				f11f4.Credentials = f11f4f2
			}
			if resp.SourceParameters.ManagedStreamingKafkaParameters.MaximumBatchingWindowInSeconds != nil {
				f11f4.MaximumBatchingWindowInSeconds = resp.SourceParameters.ManagedStreamingKafkaParameters.MaximumBatchingWindowInSeconds
			}
			if resp.SourceParameters.ManagedStreamingKafkaParameters.StartingPosition != nil {
				f11f4.StartingPosition = resp.SourceParameters.ManagedStreamingKafkaParameters.StartingPosition
			}
			if resp.SourceParameters.ManagedStreamingKafkaParameters.TopicName != nil {
				f11f4.TopicName = resp.SourceParameters.ManagedStreamingKafkaParameters.TopicName
			}
			f11.ManagedStreamingKafkaParameters = f11f4
		}
		if resp.SourceParameters.RabbitMQBrokerParameters != nil {
			f11f5 := &svcapitypes.PipeSourceRabbitMQBrokerParameters{}
			if resp.SourceParameters.RabbitMQBrokerParameters.BatchSize != nil {
				f11f5.BatchSize = resp.SourceParameters.RabbitMQBrokerParameters.BatchSize
			}
			if resp.SourceParameters.RabbitMQBrokerParameters.Credentials != nil {
				f11f5f1 := &svcapitypes.MQBrokerAccessCredentials{}
				if resp.SourceParameters.RabbitMQBrokerParameters.Credentials.BasicAuth != nil {
					f11f5f1.BasicAuth = resp.SourceParameters.RabbitMQBrokerParameters.Credentials.BasicAuth
				}
				f11f5.Credentials = f11f5f1
			}
			if resp.SourceParameters.RabbitMQBrokerParameters.MaximumBatchingWindowInSeconds != nil {
				f11f5.MaximumBatchingWindowInSeconds = resp.SourceParameters.RabbitMQBrokerParameters.MaximumBatchingWindowInSeconds
			}
			if resp.SourceParameters.RabbitMQBrokerParameters.QueueName != nil {
				f11f5.QueueName = resp.SourceParameters.RabbitMQBrokerParameters.QueueName
			}
			if resp.SourceParameters.RabbitMQBrokerParameters.VirtualHost != nil {
				f11f5.VirtualHost = resp.SourceParameters.RabbitMQBrokerParameters.VirtualHost
			}
			f11.RabbitMQBrokerParameters = f11f5
		}
		if resp.SourceParameters.SelfManagedKafkaParameters != nil {
			f11f6 := &svcapitypes.PipeSourceSelfManagedKafkaParameters{}
			if resp.SourceParameters.SelfManagedKafkaParameters.AdditionalBootstrapServers != nil {
				f11f6f0 := []*string{}
				for _, f11f6f0iter := range resp.SourceParameters.SelfManagedKafkaParameters.AdditionalBootstrapServers {
					var f11f6f0elem string
					f11f6f0elem = *f11f6f0iter
					f11f6f0 = append(f11f6f0, &f11f6f0elem)
				}
				f11f6.AdditionalBootstrapServers = f11f6f0
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.BatchSize != nil {
				f11f6.BatchSize = resp.SourceParameters.SelfManagedKafkaParameters.BatchSize
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.ConsumerGroupID != nil {
				f11f6.ConsumerGroupID = resp.SourceParameters.SelfManagedKafkaParameters.ConsumerGroupID
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.Credentials != nil {
				f11f6f3 := &svcapitypes.SelfManagedKafkaAccessConfigurationCredentials{}
				if resp.SourceParameters.SelfManagedKafkaParameters.Credentials.BasicAuth != nil {
					f11f6f3.BasicAuth = resp.SourceParameters.SelfManagedKafkaParameters.Credentials.BasicAuth
				}
				if resp.SourceParameters.SelfManagedKafkaParameters.Credentials.ClientCertificateTlsAuth != nil {
					f11f6f3.ClientCertificateTLSAuth = resp.SourceParameters.SelfManagedKafkaParameters.Credentials.ClientCertificateTlsAuth
				}
				if resp.SourceParameters.SelfManagedKafkaParameters.Credentials.SaslScram256Auth != nil {
					f11f6f3.SASLSCRAM256Auth = resp.SourceParameters.SelfManagedKafkaParameters.Credentials.SaslScram256Auth
				}
				if resp.SourceParameters.SelfManagedKafkaParameters.Credentials.SaslScram512Auth != nil {
					f11f6f3.SASLSCRAM512Auth = resp.SourceParameters.SelfManagedKafkaParameters.Credentials.SaslScram512Auth
				}
				f11f6.Credentials = f11f6f3
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.MaximumBatchingWindowInSeconds != nil {
				f11f6.MaximumBatchingWindowInSeconds = resp.SourceParameters.SelfManagedKafkaParameters.MaximumBatchingWindowInSeconds
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.ServerRootCaCertificate != nil {
				f11f6.ServerRootCaCertificate = resp.SourceParameters.SelfManagedKafkaParameters.ServerRootCaCertificate
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.StartingPosition != nil {
				f11f6.StartingPosition = resp.SourceParameters.SelfManagedKafkaParameters.StartingPosition
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.TopicName != nil {
				f11f6.TopicName = resp.SourceParameters.SelfManagedKafkaParameters.TopicName
			}
			if resp.SourceParameters.SelfManagedKafkaParameters.Vpc != nil {
				f11f6f8 := &svcapitypes.SelfManagedKafkaAccessConfigurationVPC{}
				if resp.SourceParameters.SelfManagedKafkaParameters.Vpc.SecurityGroup != nil {
					f11f6f8f0 := []*string{}
					for _, f11f6f8f0iter := range resp.SourceParameters.SelfManagedKafkaParameters.Vpc.SecurityGroup {
						var f11f6f8f0elem string
						f11f6f8f0elem = *f11f6f8f0iter
						f11f6f8f0 = append(f11f6f8f0, &f11f6f8f0elem)
					}
					f11f6f8.SecurityGroup = f11f6f8f0
				}
				if resp.SourceParameters.SelfManagedKafkaParameters.Vpc.Subnets != nil {
					f11f6f8f1 := []*string{}
					for _, f11f6f8f1iter := range resp.SourceParameters.SelfManagedKafkaParameters.Vpc.Subnets {
						var f11f6f8f1elem string
						f11f6f8f1elem = *f11f6f8f1iter
						f11f6f8f1 = append(f11f6f8f1, &f11f6f8f1elem)
					}
					f11f6f8.Subnets = f11f6f8f1
				}
				f11f6.VPC = f11f6f8
			}
			f11.SelfManagedKafkaParameters = f11f6
		}
		if resp.SourceParameters.SqsQueueParameters != nil {
			f11f7 := &svcapitypes.PipeSourceSQSQueueParameters{}
			if resp.SourceParameters.SqsQueueParameters.BatchSize != nil {
				f11f7.BatchSize = resp.SourceParameters.SqsQueueParameters.BatchSize
			}
			if resp.SourceParameters.SqsQueueParameters.MaximumBatchingWindowInSeconds != nil {
				f11f7.MaximumBatchingWindowInSeconds = resp.SourceParameters.SqsQueueParameters.MaximumBatchingWindowInSeconds
			}
			f11.SQSQueueParameters = f11f7
		}
		ko.Spec.SourceParameters = f11
	} else {
		ko.Spec.SourceParameters = nil
	}
	if resp.StateReason != nil {
		ko.Status.StateReason = resp.StateReason
	} else {
		ko.Status.StateReason = nil
	}
	if resp.Tags != nil {
		f13 := map[string]*string{}
		for f13key, f13valiter := range resp.Tags {
			var f13val string
			f13val = *f13valiter
			f13[f13key] = &f13val
		}
		ko.Spec.Tags = f13
	} else {
		ko.Spec.Tags = nil
	}
	if resp.Target != nil {
		ko.Spec.Target = resp.Target
	} else {
		ko.Spec.Target = nil
	}
	if resp.TargetParameters != nil {
		f15 := &svcapitypes.PipeTargetParameters{}
		if resp.TargetParameters.BatchJobParameters != nil {
			f15f0 := &svcapitypes.PipeTargetBatchJobParameters{}
			if resp.TargetParameters.BatchJobParameters.ArrayProperties != nil {
				f15f0f0 := &svcapitypes.BatchArrayProperties{}
				if resp.TargetParameters.BatchJobParameters.ArrayProperties.Size != nil {
					f15f0f0.Size = resp.TargetParameters.BatchJobParameters.ArrayProperties.Size
				}
				f15f0.ArrayProperties = f15f0f0
			}
			if resp.TargetParameters.BatchJobParameters.ContainerOverrides != nil {
				f15f0f1 := &svcapitypes.BatchContainerOverrides{}
				if resp.TargetParameters.BatchJobParameters.ContainerOverrides.Command != nil {
					f15f0f1f0 := []*string{}
					for _, f15f0f1f0iter := range resp.TargetParameters.BatchJobParameters.ContainerOverrides.Command {
						var f15f0f1f0elem string
						f15f0f1f0elem = *f15f0f1f0iter
						f15f0f1f0 = append(f15f0f1f0, &f15f0f1f0elem)
					}
					f15f0f1.Command = f15f0f1f0
				}
				if resp.TargetParameters.BatchJobParameters.ContainerOverrides.Environment != nil {
					f15f0f1f1 := []*svcapitypes.BatchEnvironmentVariable{}
					for _, f15f0f1f1iter := range resp.TargetParameters.BatchJobParameters.ContainerOverrides.Environment {
						f15f0f1f1elem := &svcapitypes.BatchEnvironmentVariable{}
						if f15f0f1f1iter.Name != nil {
							f15f0f1f1elem.Name = f15f0f1f1iter.Name
						}
						if f15f0f1f1iter.Value != nil {
							f15f0f1f1elem.Value = f15f0f1f1iter.Value
						}
						f15f0f1f1 = append(f15f0f1f1, f15f0f1f1elem)
					}
					f15f0f1.Environment = f15f0f1f1
				}
				if resp.TargetParameters.BatchJobParameters.ContainerOverrides.InstanceType != nil {
					f15f0f1.InstanceType = resp.TargetParameters.BatchJobParameters.ContainerOverrides.InstanceType
				}
				if resp.TargetParameters.BatchJobParameters.ContainerOverrides.ResourceRequirements != nil {
					f15f0f1f3 := []*svcapitypes.BatchResourceRequirement{}
					for _, f15f0f1f3iter := range resp.TargetParameters.BatchJobParameters.ContainerOverrides.ResourceRequirements {
						f15f0f1f3elem := &svcapitypes.BatchResourceRequirement{}
						if f15f0f1f3iter.Type != nil {
							f15f0f1f3elem.Type = f15f0f1f3iter.Type
						}
						if f15f0f1f3iter.Value != nil {
							f15f0f1f3elem.Value = f15f0f1f3iter.Value
						}
						f15f0f1f3 = append(f15f0f1f3, f15f0f1f3elem)
					}
					f15f0f1.ResourceRequirements = f15f0f1f3
				}
				f15f0.ContainerOverrides = f15f0f1
			}
			if resp.TargetParameters.BatchJobParameters.DependsOn != nil {
				f15f0f2 := []*svcapitypes.BatchJobDependency{}
				for _, f15f0f2iter := range resp.TargetParameters.BatchJobParameters.DependsOn {
					f15f0f2elem := &svcapitypes.BatchJobDependency{}
					if f15f0f2iter.JobId != nil {
						f15f0f2elem.JobID = f15f0f2iter.JobId
					}
					if f15f0f2iter.Type != nil {
						f15f0f2elem.Type = f15f0f2iter.Type
					}
					f15f0f2 = append(f15f0f2, f15f0f2elem)
				}
				f15f0.DependsOn = f15f0f2
			}
			if resp.TargetParameters.BatchJobParameters.JobDefinition != nil {
				f15f0.JobDefinition = resp.TargetParameters.BatchJobParameters.JobDefinition
			}
			if resp.TargetParameters.BatchJobParameters.JobName != nil {
				f15f0.JobName = resp.TargetParameters.BatchJobParameters.JobName
			}
			if resp.TargetParameters.BatchJobParameters.Parameters != nil {
				f15f0f5 := map[string]*string{}
				for f15f0f5key, f15f0f5valiter := range resp.TargetParameters.BatchJobParameters.Parameters {
					var f15f0f5val string
					f15f0f5val = *f15f0f5valiter
					f15f0f5[f15f0f5key] = &f15f0f5val
				}
				f15f0.Parameters = f15f0f5
			}
			if resp.TargetParameters.BatchJobParameters.RetryStrategy != nil {
				f15f0f6 := &svcapitypes.BatchRetryStrategy{}
				if resp.TargetParameters.BatchJobParameters.RetryStrategy.Attempts != nil {
					f15f0f6.Attempts = resp.TargetParameters.BatchJobParameters.RetryStrategy.Attempts
				}
				f15f0.RetryStrategy = f15f0f6
			}
			f15.BatchJobParameters = f15f0
		}
		if resp.TargetParameters.CloudWatchLogsParameters != nil {
			f15f1 := &svcapitypes.PipeTargetCloudWatchLogsParameters{}
			if resp.TargetParameters.CloudWatchLogsParameters.LogStreamName != nil {
				f15f1.LogStreamName = resp.TargetParameters.CloudWatchLogsParameters.LogStreamName
			}
			if resp.TargetParameters.CloudWatchLogsParameters.Timestamp != nil {
				f15f1.Timestamp = resp.TargetParameters.CloudWatchLogsParameters.Timestamp
			}
			f15.CloudWatchLogsParameters = f15f1
		}
		if resp.TargetParameters.EcsTaskParameters != nil {
			f15f2 := &svcapitypes.PipeTargetECSTaskParameters{}
			if resp.TargetParameters.EcsTaskParameters.CapacityProviderStrategy != nil {
				f15f2f0 := []*svcapitypes.CapacityProviderStrategyItem{}
				for _, f15f2f0iter := range resp.TargetParameters.EcsTaskParameters.CapacityProviderStrategy {
					f15f2f0elem := &svcapitypes.CapacityProviderStrategyItem{}
					if f15f2f0iter.Base != nil {
						f15f2f0elem.Base = f15f2f0iter.Base
					}
					if f15f2f0iter.CapacityProvider != nil {
						f15f2f0elem.CapacityProvider = f15f2f0iter.CapacityProvider
					}
					if f15f2f0iter.Weight != nil {
						f15f2f0elem.Weight = f15f2f0iter.Weight
					}
					f15f2f0 = append(f15f2f0, f15f2f0elem)
				}
				f15f2.CapacityProviderStrategy = f15f2f0
			}
			if resp.TargetParameters.EcsTaskParameters.EnableECSManagedTags != nil {
				f15f2.EnableECSManagedTags = resp.TargetParameters.EcsTaskParameters.EnableECSManagedTags
			}
			if resp.TargetParameters.EcsTaskParameters.EnableExecuteCommand != nil {
				f15f2.EnableExecuteCommand = resp.TargetParameters.EcsTaskParameters.EnableExecuteCommand
			}
			if resp.TargetParameters.EcsTaskParameters.Group != nil {
				f15f2.Group = resp.TargetParameters.EcsTaskParameters.Group
			}
			if resp.TargetParameters.EcsTaskParameters.LaunchType != nil {
				f15f2.LaunchType = resp.TargetParameters.EcsTaskParameters.LaunchType
			}
			if resp.TargetParameters.EcsTaskParameters.NetworkConfiguration != nil {
				f15f2f5 := &svcapitypes.NetworkConfiguration{}
				if resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration != nil {
					f15f2f5f0 := &svcapitypes.AWSVPCConfiguration{}
					if resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
						f15f2f5f0.AssignPublicIP = resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
					}
					if resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
						f15f2f5f0f1 := []*string{}
						for _, f15f2f5f0f1iter := range resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
							var f15f2f5f0f1elem string
							f15f2f5f0f1elem = *f15f2f5f0f1iter
							f15f2f5f0f1 = append(f15f2f5f0f1, &f15f2f5f0f1elem)
						}
						f15f2f5f0.SecurityGroups = f15f2f5f0f1
					}
					if resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
						f15f2f5f0f2 := []*string{}
						for _, f15f2f5f0f2iter := range resp.TargetParameters.EcsTaskParameters.NetworkConfiguration.AwsvpcConfiguration.Subnets {
							var f15f2f5f0f2elem string
							f15f2f5f0f2elem = *f15f2f5f0f2iter
							f15f2f5f0f2 = append(f15f2f5f0f2, &f15f2f5f0f2elem)
						}
						f15f2f5f0.Subnets = f15f2f5f0f2
					}
					f15f2f5.AWSVPCConfiguration = f15f2f5f0
				}
				f15f2.NetworkConfiguration = f15f2f5
			}
			if resp.TargetParameters.EcsTaskParameters.Overrides != nil {
				f15f2f6 := &svcapitypes.ECSTaskOverride{}
				if resp.TargetParameters.EcsTaskParameters.Overrides.ContainerOverrides != nil {
					f15f2f6f0 := []*svcapitypes.ECSContainerOverride{}
					for _, f15f2f6f0iter := range resp.TargetParameters.EcsTaskParameters.Overrides.ContainerOverrides {
						f15f2f6f0elem := &svcapitypes.ECSContainerOverride{}
						if f15f2f6f0iter.Command != nil {
							f15f2f6f0elemf0 := []*string{}
							for _, f15f2f6f0elemf0iter := range f15f2f6f0iter.Command {
								var f15f2f6f0elemf0elem string
								f15f2f6f0elemf0elem = *f15f2f6f0elemf0iter
								f15f2f6f0elemf0 = append(f15f2f6f0elemf0, &f15f2f6f0elemf0elem)
							}
							f15f2f6f0elem.Command = f15f2f6f0elemf0
						}
						if f15f2f6f0iter.Cpu != nil {
							f15f2f6f0elem.CPU = f15f2f6f0iter.Cpu
						}
						if f15f2f6f0iter.Environment != nil {
							f15f2f6f0elemf2 := []*svcapitypes.ECSEnvironmentVariable{}
							for _, f15f2f6f0elemf2iter := range f15f2f6f0iter.Environment {
								f15f2f6f0elemf2elem := &svcapitypes.ECSEnvironmentVariable{}
								if f15f2f6f0elemf2iter.Name != nil {
									f15f2f6f0elemf2elem.Name = f15f2f6f0elemf2iter.Name
								}
								if f15f2f6f0elemf2iter.Value != nil {
									f15f2f6f0elemf2elem.Value = f15f2f6f0elemf2iter.Value
								}
								f15f2f6f0elemf2 = append(f15f2f6f0elemf2, f15f2f6f0elemf2elem)
							}
							f15f2f6f0elem.Environment = f15f2f6f0elemf2
						}
						if f15f2f6f0iter.EnvironmentFiles != nil {
							f15f2f6f0elemf3 := []*svcapitypes.ECSEnvironmentFile{}
							for _, f15f2f6f0elemf3iter := range f15f2f6f0iter.EnvironmentFiles {
								f15f2f6f0elemf3elem := &svcapitypes.ECSEnvironmentFile{}
								if f15f2f6f0elemf3iter.Type != nil {
									f15f2f6f0elemf3elem.Type = f15f2f6f0elemf3iter.Type
								}
								if f15f2f6f0elemf3iter.Value != nil {
									f15f2f6f0elemf3elem.Value = f15f2f6f0elemf3iter.Value
								}
								f15f2f6f0elemf3 = append(f15f2f6f0elemf3, f15f2f6f0elemf3elem)
							}
							f15f2f6f0elem.EnvironmentFiles = f15f2f6f0elemf3
						}
						if f15f2f6f0iter.Memory != nil {
							f15f2f6f0elem.Memory = f15f2f6f0iter.Memory
						}
						if f15f2f6f0iter.MemoryReservation != nil {
							f15f2f6f0elem.MemoryReservation = f15f2f6f0iter.MemoryReservation
						}
						if f15f2f6f0iter.Name != nil {
							f15f2f6f0elem.Name = f15f2f6f0iter.Name
						}
						if f15f2f6f0iter.ResourceRequirements != nil {
							f15f2f6f0elemf7 := []*svcapitypes.ECSResourceRequirement{}
							for _, f15f2f6f0elemf7iter := range f15f2f6f0iter.ResourceRequirements {
								f15f2f6f0elemf7elem := &svcapitypes.ECSResourceRequirement{}
								if f15f2f6f0elemf7iter.Type != nil {
									f15f2f6f0elemf7elem.Type = f15f2f6f0elemf7iter.Type
								}
								if f15f2f6f0elemf7iter.Value != nil {
									f15f2f6f0elemf7elem.Value = f15f2f6f0elemf7iter.Value
								}
								f15f2f6f0elemf7 = append(f15f2f6f0elemf7, f15f2f6f0elemf7elem)
							}
							f15f2f6f0elem.ResourceRequirements = f15f2f6f0elemf7
						}
						f15f2f6f0 = append(f15f2f6f0, f15f2f6f0elem)
					}
					f15f2f6.ContainerOverrides = f15f2f6f0
				}
				if resp.TargetParameters.EcsTaskParameters.Overrides.Cpu != nil {
					f15f2f6.CPU = resp.TargetParameters.EcsTaskParameters.Overrides.Cpu
				}
				if resp.TargetParameters.EcsTaskParameters.Overrides.EphemeralStorage != nil {
					f15f2f6f2 := &svcapitypes.ECSEphemeralStorage{}
					if resp.TargetParameters.EcsTaskParameters.Overrides.EphemeralStorage.SizeInGiB != nil {
						f15f2f6f2.SizeInGiB = resp.TargetParameters.EcsTaskParameters.Overrides.EphemeralStorage.SizeInGiB
					}
					f15f2f6.EphemeralStorage = f15f2f6f2
				}
				if resp.TargetParameters.EcsTaskParameters.Overrides.ExecutionRoleArn != nil {
					f15f2f6.ExecutionRoleARN = resp.TargetParameters.EcsTaskParameters.Overrides.ExecutionRoleArn
				}
				if resp.TargetParameters.EcsTaskParameters.Overrides.InferenceAcceleratorOverrides != nil {
					f15f2f6f4 := []*svcapitypes.ECSInferenceAcceleratorOverride{}
					for _, f15f2f6f4iter := range resp.TargetParameters.EcsTaskParameters.Overrides.InferenceAcceleratorOverrides {
						f15f2f6f4elem := &svcapitypes.ECSInferenceAcceleratorOverride{}
						if f15f2f6f4iter.DeviceName != nil {
							f15f2f6f4elem.DeviceName = f15f2f6f4iter.DeviceName
						}
						if f15f2f6f4iter.DeviceType != nil {
							f15f2f6f4elem.DeviceType = f15f2f6f4iter.DeviceType
						}
						f15f2f6f4 = append(f15f2f6f4, f15f2f6f4elem)
					}
					f15f2f6.InferenceAcceleratorOverrides = f15f2f6f4
				}
				if resp.TargetParameters.EcsTaskParameters.Overrides.Memory != nil {
					f15f2f6.Memory = resp.TargetParameters.EcsTaskParameters.Overrides.Memory
				}
				if resp.TargetParameters.EcsTaskParameters.Overrides.TaskRoleArn != nil {
					f15f2f6.TaskRoleARN = resp.TargetParameters.EcsTaskParameters.Overrides.TaskRoleArn
				}
				f15f2.Overrides = f15f2f6
			}
			if resp.TargetParameters.EcsTaskParameters.PlacementConstraints != nil {
				f15f2f7 := []*svcapitypes.PlacementConstraint{}
				for _, f15f2f7iter := range resp.TargetParameters.EcsTaskParameters.PlacementConstraints {
					f15f2f7elem := &svcapitypes.PlacementConstraint{}
					if f15f2f7iter.Expression != nil {
						f15f2f7elem.Expression = f15f2f7iter.Expression
					}
					if f15f2f7iter.Type != nil {
						f15f2f7elem.Type = f15f2f7iter.Type
					}
					f15f2f7 = append(f15f2f7, f15f2f7elem)
				}
				f15f2.PlacementConstraints = f15f2f7
			}
			if resp.TargetParameters.EcsTaskParameters.PlacementStrategy != nil {
				f15f2f8 := []*svcapitypes.PlacementStrategy{}
				for _, f15f2f8iter := range resp.TargetParameters.EcsTaskParameters.PlacementStrategy {
					f15f2f8elem := &svcapitypes.PlacementStrategy{}
					if f15f2f8iter.Field != nil {
						f15f2f8elem.Field = f15f2f8iter.Field
					}
					if f15f2f8iter.Type != nil {
						f15f2f8elem.Type = f15f2f8iter.Type
					}
					f15f2f8 = append(f15f2f8, f15f2f8elem)
				}
				f15f2.PlacementStrategy = f15f2f8
			}
			if resp.TargetParameters.EcsTaskParameters.PlatformVersion != nil {
				f15f2.PlatformVersion = resp.TargetParameters.EcsTaskParameters.PlatformVersion
			}
			if resp.TargetParameters.EcsTaskParameters.PropagateTags != nil {
				f15f2.PropagateTags = resp.TargetParameters.EcsTaskParameters.PropagateTags
			}
			if resp.TargetParameters.EcsTaskParameters.ReferenceId != nil {
				f15f2.ReferenceID = resp.TargetParameters.EcsTaskParameters.ReferenceId
			}
			if resp.TargetParameters.EcsTaskParameters.Tags != nil {
				f15f2f12 := []*svcapitypes.Tag{}
				for _, f15f2f12iter := range resp.TargetParameters.EcsTaskParameters.Tags {
					f15f2f12elem := &svcapitypes.Tag{}
					if f15f2f12iter.Key != nil {
						f15f2f12elem.Key = f15f2f12iter.Key
					}
					if f15f2f12iter.Value != nil {
						f15f2f12elem.Value = f15f2f12iter.Value
					}
					f15f2f12 = append(f15f2f12, f15f2f12elem)
				}
				f15f2.Tags = f15f2f12
			}
			if resp.TargetParameters.EcsTaskParameters.TaskCount != nil {
				f15f2.TaskCount = resp.TargetParameters.EcsTaskParameters.TaskCount
			}
			if resp.TargetParameters.EcsTaskParameters.TaskDefinitionArn != nil {
				f15f2.TaskDefinitionARN = resp.TargetParameters.EcsTaskParameters.TaskDefinitionArn
			}
			f15.ECSTaskParameters = f15f2
		}
		if resp.TargetParameters.EventBridgeEventBusParameters != nil {
			f15f3 := &svcapitypes.PipeTargetEventBridgeEventBusParameters{}
			if resp.TargetParameters.EventBridgeEventBusParameters.DetailType != nil {
				f15f3.DetailType = resp.TargetParameters.EventBridgeEventBusParameters.DetailType
			}
			if resp.TargetParameters.EventBridgeEventBusParameters.EndpointId != nil {
				f15f3.EndpointID = resp.TargetParameters.EventBridgeEventBusParameters.EndpointId
			}
			if resp.TargetParameters.EventBridgeEventBusParameters.Resources != nil {
				f15f3f2 := []*string{}
				for _, f15f3f2iter := range resp.TargetParameters.EventBridgeEventBusParameters.Resources {
					var f15f3f2elem string
					f15f3f2elem = *f15f3f2iter
					f15f3f2 = append(f15f3f2, &f15f3f2elem)
				}
				f15f3.Resources = f15f3f2
			}
			if resp.TargetParameters.EventBridgeEventBusParameters.Source != nil {
				f15f3.Source = resp.TargetParameters.EventBridgeEventBusParameters.Source
			}
			if resp.TargetParameters.EventBridgeEventBusParameters.Time != nil {
				f15f3.Time = resp.TargetParameters.EventBridgeEventBusParameters.Time
			}
			f15.EventBridgeEventBusParameters = f15f3
		}
		if resp.TargetParameters.HttpParameters != nil {
			f15f4 := &svcapitypes.PipeTargetHTTPParameters{}
			if resp.TargetParameters.HttpParameters.HeaderParameters != nil {
				f15f4f0 := map[string]*string{}
				for f15f4f0key, f15f4f0valiter := range resp.TargetParameters.HttpParameters.HeaderParameters {
					var f15f4f0val string
					f15f4f0val = *f15f4f0valiter
					f15f4f0[f15f4f0key] = &f15f4f0val
				}
				f15f4.HeaderParameters = f15f4f0
			}
			if resp.TargetParameters.HttpParameters.PathParameterValues != nil {
				f15f4f1 := []*string{}
				for _, f15f4f1iter := range resp.TargetParameters.HttpParameters.PathParameterValues {
					var f15f4f1elem string
					f15f4f1elem = *f15f4f1iter
					f15f4f1 = append(f15f4f1, &f15f4f1elem)
				}
				f15f4.PathParameterValues = f15f4f1
			}
			if resp.TargetParameters.HttpParameters.QueryStringParameters != nil {
				f15f4f2 := map[string]*string{}
				for f15f4f2key, f15f4f2valiter := range resp.TargetParameters.HttpParameters.QueryStringParameters {
					var f15f4f2val string
					f15f4f2val = *f15f4f2valiter
					f15f4f2[f15f4f2key] = &f15f4f2val
				}
				f15f4.QueryStringParameters = f15f4f2
			}
			f15.HTTPParameters = f15f4
		}
		if resp.TargetParameters.InputTemplate != nil {
			f15.InputTemplate = resp.TargetParameters.InputTemplate
		}
		if resp.TargetParameters.KinesisStreamParameters != nil {
			f15f6 := &svcapitypes.PipeTargetKinesisStreamParameters{}
			if resp.TargetParameters.KinesisStreamParameters.PartitionKey != nil {
				f15f6.PartitionKey = resp.TargetParameters.KinesisStreamParameters.PartitionKey
			}
			f15.KinesisStreamParameters = f15f6
		}
		if resp.TargetParameters.LambdaFunctionParameters != nil {
			f15f7 := &svcapitypes.PipeTargetLambdaFunctionParameters{}
			if resp.TargetParameters.LambdaFunctionParameters.InvocationType != nil {
				f15f7.InvocationType = resp.TargetParameters.LambdaFunctionParameters.InvocationType
			}
			f15.LambdaFunctionParameters = f15f7
		}
		if resp.TargetParameters.RedshiftDataParameters != nil {
			f15f8 := &svcapitypes.PipeTargetRedshiftDataParameters{}
			if resp.TargetParameters.RedshiftDataParameters.Database != nil {
				f15f8.Database = resp.TargetParameters.RedshiftDataParameters.Database
			}
			if resp.TargetParameters.RedshiftDataParameters.DbUser != nil {
				f15f8.DBUser = resp.TargetParameters.RedshiftDataParameters.DbUser
			}
			if resp.TargetParameters.RedshiftDataParameters.SecretManagerArn != nil {
				f15f8.SecretManagerARN = resp.TargetParameters.RedshiftDataParameters.SecretManagerArn
			}
			if resp.TargetParameters.RedshiftDataParameters.Sqls != nil {
				f15f8f3 := []*string{}
				for _, f15f8f3iter := range resp.TargetParameters.RedshiftDataParameters.Sqls {
					var f15f8f3elem string
					f15f8f3elem = *f15f8f3iter
					f15f8f3 = append(f15f8f3, &f15f8f3elem)
				}
				f15f8.SQLs = f15f8f3
			}
			if resp.TargetParameters.RedshiftDataParameters.StatementName != nil {
				f15f8.StatementName = resp.TargetParameters.RedshiftDataParameters.StatementName
			}
			if resp.TargetParameters.RedshiftDataParameters.WithEvent != nil {
				f15f8.WithEvent = resp.TargetParameters.RedshiftDataParameters.WithEvent
			}
			f15.RedshiftDataParameters = f15f8
		}
		if resp.TargetParameters.SageMakerPipelineParameters != nil {
			f15f9 := &svcapitypes.PipeTargetSageMakerPipelineParameters{}
			if resp.TargetParameters.SageMakerPipelineParameters.PipelineParameterList != nil {
				f15f9f0 := []*svcapitypes.SageMakerPipelineParameter{}
				for _, f15f9f0iter := range resp.TargetParameters.SageMakerPipelineParameters.PipelineParameterList {
					f15f9f0elem := &svcapitypes.SageMakerPipelineParameter{}
					if f15f9f0iter.Name != nil {
						f15f9f0elem.Name = f15f9f0iter.Name
					}
					if f15f9f0iter.Value != nil {
						f15f9f0elem.Value = f15f9f0iter.Value
					}
					f15f9f0 = append(f15f9f0, f15f9f0elem)
				}
				f15f9.PipelineParameterList = f15f9f0
			}
			f15.SageMakerPipelineParameters = f15f9
		}
		if resp.TargetParameters.SqsQueueParameters != nil {
			f15f10 := &svcapitypes.PipeTargetSQSQueueParameters{}
			if resp.TargetParameters.SqsQueueParameters.MessageDeduplicationId != nil {
				f15f10.MessageDeduplicationID = resp.TargetParameters.SqsQueueParameters.MessageDeduplicationId
			}
			if resp.TargetParameters.SqsQueueParameters.MessageGroupId != nil {
				f15f10.MessageGroupID = resp.TargetParameters.SqsQueueParameters.MessageGroupId
			}
			f15.SQSQueueParameters = f15f10
		}
		if resp.TargetParameters.StepFunctionStateMachineParameters != nil {
			f15f11 := &svcapitypes.PipeTargetStateMachineParameters{}
			if resp.TargetParameters.StepFunctionStateMachineParameters.InvocationType != nil {
				f15f11.InvocationType = resp.TargetParameters.StepFunctionStateMachineParameters.InvocationType
			}
			f15.StepFunctionStateMachineParameters = f15f11
		}
		ko.Spec.TargetParameters = f15
	} else {
		ko.Spec.TargetParameters = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.Name == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribePipeInput, error) {
	res := &svcsdk.DescribePipeInput{}

	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreatePipeOutput
	_ = resp
	resp, err = rm.sdkapi.CreatePipeWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreatePipe", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.CurrentState != nil {
		ko.Status.CurrentState = resp.CurrentState
	} else {
		ko.Status.CurrentState = nil
	}
	if resp.DesiredState != nil {
		ko.Spec.DesiredState = resp.DesiredState
	} else {
		ko.Spec.DesiredState = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}

	rm.setStatusDefaults(ko)
	if !pipeAvailable(&resource{ko}) {
		return &resource{ko}, requeueWaitWhileCreating
	}
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreatePipeInput, error) {
	res := &svcsdk.CreatePipeInput{}

	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.DesiredState != nil {
		res.SetDesiredState(*r.ko.Spec.DesiredState)
	}
	if r.ko.Spec.Enrichment != nil {
		res.SetEnrichment(*r.ko.Spec.Enrichment)
	}
	if r.ko.Spec.EnrichmentParameters != nil {
		f3 := &svcsdk.PipeEnrichmentParameters{}
		if r.ko.Spec.EnrichmentParameters.HTTPParameters != nil {
			f3f0 := &svcsdk.PipeEnrichmentHttpParameters{}
			if r.ko.Spec.EnrichmentParameters.HTTPParameters.HeaderParameters != nil {
				f3f0f0 := map[string]*string{}
				for f3f0f0key, f3f0f0valiter := range r.ko.Spec.EnrichmentParameters.HTTPParameters.HeaderParameters {
					var f3f0f0val string
					f3f0f0val = *f3f0f0valiter
					f3f0f0[f3f0f0key] = &f3f0f0val
				}
				f3f0.SetHeaderParameters(f3f0f0)
			}
			if r.ko.Spec.EnrichmentParameters.HTTPParameters.PathParameterValues != nil {
				f3f0f1 := []*string{}
				for _, f3f0f1iter := range r.ko.Spec.EnrichmentParameters.HTTPParameters.PathParameterValues {
					var f3f0f1elem string
					f3f0f1elem = *f3f0f1iter
					f3f0f1 = append(f3f0f1, &f3f0f1elem)
				}
				f3f0.SetPathParameterValues(f3f0f1)
			}
			if r.ko.Spec.EnrichmentParameters.HTTPParameters.QueryStringParameters != nil {
				f3f0f2 := map[string]*string{}
				for f3f0f2key, f3f0f2valiter := range r.ko.Spec.EnrichmentParameters.HTTPParameters.QueryStringParameters {
					var f3f0f2val string
					f3f0f2val = *f3f0f2valiter
					f3f0f2[f3f0f2key] = &f3f0f2val
				}
				f3f0.SetQueryStringParameters(f3f0f2)
			}
			f3.SetHttpParameters(f3f0)
		}
		if r.ko.Spec.EnrichmentParameters.InputTemplate != nil {
			f3.SetInputTemplate(*r.ko.Spec.EnrichmentParameters.InputTemplate)
		}
		res.SetEnrichmentParameters(f3)
	}
	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.RoleARN != nil {
		res.SetRoleArn(*r.ko.Spec.RoleARN)
	}
	if r.ko.Spec.Source != nil {
		res.SetSource(*r.ko.Spec.Source)
	}
	if r.ko.Spec.SourceParameters != nil {
		f7 := &svcsdk.PipeSourceParameters{}
		if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters != nil {
			f7f0 := &svcsdk.PipeSourceActiveMQBrokerParameters{}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.BatchSize != nil {
				f7f0.SetBatchSize(*r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.Credentials != nil {
				f7f0f1 := &svcsdk.MQBrokerAccessCredentials{}
				if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.Credentials.BasicAuth != nil {
					f7f0f1.SetBasicAuth(*r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.Credentials.BasicAuth)
				}
				f7f0.SetCredentials(f7f0f1)
			}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.MaximumBatchingWindowInSeconds != nil {
				f7f0.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.MaximumBatchingWindowInSeconds)
			}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.QueueName != nil {
				f7f0.SetQueueName(*r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.QueueName)
			}
			f7.SetActiveMQBrokerParameters(f7f0)
		}
		if r.ko.Spec.SourceParameters.DynamoDBStreamParameters != nil {
			f7f1 := &svcsdk.PipeSourceDynamoDBStreamParameters{}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.BatchSize != nil {
				f7f1.SetBatchSize(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig != nil {
				f7f1f1 := &svcsdk.DeadLetterConfig{}
				if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig.ARN != nil {
					f7f1f1.SetArn(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig.ARN)
				}
				f7f1.SetDeadLetterConfig(f7f1f1)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumBatchingWindowInSeconds != nil {
				f7f1.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumBatchingWindowInSeconds)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRecordAgeInSeconds != nil {
				f7f1.SetMaximumRecordAgeInSeconds(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRecordAgeInSeconds)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRetryAttempts != nil {
				f7f1.SetMaximumRetryAttempts(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRetryAttempts)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.OnPartialBatchItemFailure != nil {
				f7f1.SetOnPartialBatchItemFailure(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.OnPartialBatchItemFailure)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.ParallelizationFactor != nil {
				f7f1.SetParallelizationFactor(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.ParallelizationFactor)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.StartingPosition != nil {
				f7f1.SetStartingPosition(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.StartingPosition)
			}
			f7.SetDynamoDBStreamParameters(f7f1)
		}
		if r.ko.Spec.SourceParameters.FilterCriteria != nil {
			f7f2 := &svcsdk.FilterCriteria{}
			if r.ko.Spec.SourceParameters.FilterCriteria.Filters != nil {
				f7f2f0 := []*svcsdk.Filter{}
				for _, f7f2f0iter := range r.ko.Spec.SourceParameters.FilterCriteria.Filters {
					f7f2f0elem := &svcsdk.Filter{}
					if f7f2f0iter.Pattern != nil {
						f7f2f0elem.SetPattern(*f7f2f0iter.Pattern)
					}
					f7f2f0 = append(f7f2f0, f7f2f0elem)
				}
				f7f2.SetFilters(f7f2f0)
			}
			f7.SetFilterCriteria(f7f2)
		}
		if r.ko.Spec.SourceParameters.KinesisStreamParameters != nil {
			f7f3 := &svcsdk.PipeSourceKinesisStreamParameters{}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.BatchSize != nil {
				f7f3.SetBatchSize(*r.ko.Spec.SourceParameters.KinesisStreamParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.DeadLetterConfig != nil {
				f7f3f1 := &svcsdk.DeadLetterConfig{}
				if r.ko.Spec.SourceParameters.KinesisStreamParameters.DeadLetterConfig.ARN != nil {
					f7f3f1.SetArn(*r.ko.Spec.SourceParameters.KinesisStreamParameters.DeadLetterConfig.ARN)
				}
				f7f3.SetDeadLetterConfig(f7f3f1)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumBatchingWindowInSeconds != nil {
				f7f3.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumBatchingWindowInSeconds)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRecordAgeInSeconds != nil {
				f7f3.SetMaximumRecordAgeInSeconds(*r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRecordAgeInSeconds)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRetryAttempts != nil {
				f7f3.SetMaximumRetryAttempts(*r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRetryAttempts)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.OnPartialBatchItemFailure != nil {
				f7f3.SetOnPartialBatchItemFailure(*r.ko.Spec.SourceParameters.KinesisStreamParameters.OnPartialBatchItemFailure)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.ParallelizationFactor != nil {
				f7f3.SetParallelizationFactor(*r.ko.Spec.SourceParameters.KinesisStreamParameters.ParallelizationFactor)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.StartingPosition != nil {
				f7f3.SetStartingPosition(*r.ko.Spec.SourceParameters.KinesisStreamParameters.StartingPosition)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.StartingPositionTimestamp != nil {
				f7f3.SetStartingPositionTimestamp(r.ko.Spec.SourceParameters.KinesisStreamParameters.StartingPositionTimestamp.Time)
			}
			f7.SetKinesisStreamParameters(f7f3)
		}
		if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters != nil {
			f7f4 := &svcsdk.PipeSourceManagedStreamingKafkaParameters{}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.BatchSize != nil {
				f7f4.SetBatchSize(*r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.ConsumerGroupID != nil {
				f7f4.SetConsumerGroupID(*r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.ConsumerGroupID)
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials != nil {
				f7f4f2 := &svcsdk.MSKAccessCredentials{}
				if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.ClientCertificateTLSAuth != nil {
					f7f4f2.SetClientCertificateTlsAuth(*r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.ClientCertificateTLSAuth)
				}
				if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.SASLSCRAM512Auth != nil {
					f7f4f2.SetSaslScram512Auth(*r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.SASLSCRAM512Auth)
				}
				f7f4.SetCredentials(f7f4f2)
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.MaximumBatchingWindowInSeconds != nil {
				f7f4.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.MaximumBatchingWindowInSeconds)
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.StartingPosition != nil {
				f7f4.SetStartingPosition(*r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.StartingPosition)
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.TopicName != nil {
				f7f4.SetTopicName(*r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.TopicName)
			}
			f7.SetManagedStreamingKafkaParameters(f7f4)
		}
		if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters != nil {
			f7f5 := &svcsdk.PipeSourceRabbitMQBrokerParameters{}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.BatchSize != nil {
				f7f5.SetBatchSize(*r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.Credentials != nil {
				f7f5f1 := &svcsdk.MQBrokerAccessCredentials{}
				if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.Credentials.BasicAuth != nil {
					f7f5f1.SetBasicAuth(*r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.Credentials.BasicAuth)
				}
				f7f5.SetCredentials(f7f5f1)
			}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.MaximumBatchingWindowInSeconds != nil {
				f7f5.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.MaximumBatchingWindowInSeconds)
			}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.QueueName != nil {
				f7f5.SetQueueName(*r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.QueueName)
			}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.VirtualHost != nil {
				f7f5.SetVirtualHost(*r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.VirtualHost)
			}
			f7.SetRabbitMQBrokerParameters(f7f5)
		}
		if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters != nil {
			f7f6 := &svcsdk.PipeSourceSelfManagedKafkaParameters{}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.AdditionalBootstrapServers != nil {
				f7f6f0 := []*string{}
				for _, f7f6f0iter := range r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.AdditionalBootstrapServers {
					var f7f6f0elem string
					f7f6f0elem = *f7f6f0iter
					f7f6f0 = append(f7f6f0, &f7f6f0elem)
				}
				f7f6.SetAdditionalBootstrapServers(f7f6f0)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.BatchSize != nil {
				f7f6.SetBatchSize(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.ConsumerGroupID != nil {
				f7f6.SetConsumerGroupID(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.ConsumerGroupID)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials != nil {
				f7f6f3 := &svcsdk.SelfManagedKafkaAccessConfigurationCredentials{}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.BasicAuth != nil {
					f7f6f3.SetBasicAuth(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.BasicAuth)
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.ClientCertificateTLSAuth != nil {
					f7f6f3.SetClientCertificateTlsAuth(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.ClientCertificateTLSAuth)
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM256Auth != nil {
					f7f6f3.SetSaslScram256Auth(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM256Auth)
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM512Auth != nil {
					f7f6f3.SetSaslScram512Auth(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM512Auth)
				}
				f7f6.SetCredentials(f7f6f3)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.MaximumBatchingWindowInSeconds != nil {
				f7f6.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.MaximumBatchingWindowInSeconds)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.ServerRootCaCertificate != nil {
				f7f6.SetServerRootCaCertificate(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.ServerRootCaCertificate)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.StartingPosition != nil {
				f7f6.SetStartingPosition(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.StartingPosition)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.TopicName != nil {
				f7f6.SetTopicName(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.TopicName)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC != nil {
				f7f6f8 := &svcsdk.SelfManagedKafkaAccessConfigurationVpc{}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.SecurityGroup != nil {
					f7f6f8f0 := []*string{}
					for _, f7f6f8f0iter := range r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.SecurityGroup {
						var f7f6f8f0elem string
						f7f6f8f0elem = *f7f6f8f0iter
						f7f6f8f0 = append(f7f6f8f0, &f7f6f8f0elem)
					}
					f7f6f8.SetSecurityGroup(f7f6f8f0)
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.Subnets != nil {
					f7f6f8f1 := []*string{}
					for _, f7f6f8f1iter := range r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.Subnets {
						var f7f6f8f1elem string
						f7f6f8f1elem = *f7f6f8f1iter
						f7f6f8f1 = append(f7f6f8f1, &f7f6f8f1elem)
					}
					f7f6f8.SetSubnets(f7f6f8f1)
				}
				f7f6.SetVpc(f7f6f8)
			}
			f7.SetSelfManagedKafkaParameters(f7f6)
		}
		if r.ko.Spec.SourceParameters.SQSQueueParameters != nil {
			f7f7 := &svcsdk.PipeSourceSqsQueueParameters{}
			if r.ko.Spec.SourceParameters.SQSQueueParameters.BatchSize != nil {
				f7f7.SetBatchSize(*r.ko.Spec.SourceParameters.SQSQueueParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.SQSQueueParameters.MaximumBatchingWindowInSeconds != nil {
				f7f7.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.SQSQueueParameters.MaximumBatchingWindowInSeconds)
			}
			f7.SetSqsQueueParameters(f7f7)
		}
		res.SetSourceParameters(f7)
	}
	if r.ko.Spec.Tags != nil {
		f8 := map[string]*string{}
		for f8key, f8valiter := range r.ko.Spec.Tags {
			var f8val string
			f8val = *f8valiter
			f8[f8key] = &f8val
		}
		res.SetTags(f8)
	}
	if r.ko.Spec.Target != nil {
		res.SetTarget(*r.ko.Spec.Target)
	}
	if r.ko.Spec.TargetParameters != nil {
		f10 := &svcsdk.PipeTargetParameters{}
		if r.ko.Spec.TargetParameters.BatchJobParameters != nil {
			f10f0 := &svcsdk.PipeTargetBatchJobParameters{}
			if r.ko.Spec.TargetParameters.BatchJobParameters.ArrayProperties != nil {
				f10f0f0 := &svcsdk.BatchArrayProperties{}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ArrayProperties.Size != nil {
					f10f0f0.SetSize(*r.ko.Spec.TargetParameters.BatchJobParameters.ArrayProperties.Size)
				}
				f10f0.SetArrayProperties(f10f0f0)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides != nil {
				f10f0f1 := &svcsdk.BatchContainerOverrides{}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Command != nil {
					f10f0f1f0 := []*string{}
					for _, f10f0f1f0iter := range r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Command {
						var f10f0f1f0elem string
						f10f0f1f0elem = *f10f0f1f0iter
						f10f0f1f0 = append(f10f0f1f0, &f10f0f1f0elem)
					}
					f10f0f1.SetCommand(f10f0f1f0)
				}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Environment != nil {
					f10f0f1f1 := []*svcsdk.BatchEnvironmentVariable{}
					for _, f10f0f1f1iter := range r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Environment {
						f10f0f1f1elem := &svcsdk.BatchEnvironmentVariable{}
						if f10f0f1f1iter.Name != nil {
							f10f0f1f1elem.SetName(*f10f0f1f1iter.Name)
						}
						if f10f0f1f1iter.Value != nil {
							f10f0f1f1elem.SetValue(*f10f0f1f1iter.Value)
						}
						f10f0f1f1 = append(f10f0f1f1, f10f0f1f1elem)
					}
					f10f0f1.SetEnvironment(f10f0f1f1)
				}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.InstanceType != nil {
					f10f0f1.SetInstanceType(*r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.InstanceType)
				}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.ResourceRequirements != nil {
					f10f0f1f3 := []*svcsdk.BatchResourceRequirement{}
					for _, f10f0f1f3iter := range r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.ResourceRequirements {
						f10f0f1f3elem := &svcsdk.BatchResourceRequirement{}
						if f10f0f1f3iter.Type != nil {
							f10f0f1f3elem.SetType(*f10f0f1f3iter.Type)
						}
						if f10f0f1f3iter.Value != nil {
							f10f0f1f3elem.SetValue(*f10f0f1f3iter.Value)
						}
						f10f0f1f3 = append(f10f0f1f3, f10f0f1f3elem)
					}
					f10f0f1.SetResourceRequirements(f10f0f1f3)
				}
				f10f0.SetContainerOverrides(f10f0f1)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.DependsOn != nil {
				f10f0f2 := []*svcsdk.BatchJobDependency{}
				for _, f10f0f2iter := range r.ko.Spec.TargetParameters.BatchJobParameters.DependsOn {
					f10f0f2elem := &svcsdk.BatchJobDependency{}
					if f10f0f2iter.JobID != nil {
						f10f0f2elem.SetJobId(*f10f0f2iter.JobID)
					}
					if f10f0f2iter.Type != nil {
						f10f0f2elem.SetType(*f10f0f2iter.Type)
					}
					f10f0f2 = append(f10f0f2, f10f0f2elem)
				}
				f10f0.SetDependsOn(f10f0f2)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.JobDefinition != nil {
				f10f0.SetJobDefinition(*r.ko.Spec.TargetParameters.BatchJobParameters.JobDefinition)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.JobName != nil {
				f10f0.SetJobName(*r.ko.Spec.TargetParameters.BatchJobParameters.JobName)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.Parameters != nil {
				f10f0f5 := map[string]*string{}
				for f10f0f5key, f10f0f5valiter := range r.ko.Spec.TargetParameters.BatchJobParameters.Parameters {
					var f10f0f5val string
					f10f0f5val = *f10f0f5valiter
					f10f0f5[f10f0f5key] = &f10f0f5val
				}
				f10f0.SetParameters(f10f0f5)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.RetryStrategy != nil {
				f10f0f6 := &svcsdk.BatchRetryStrategy{}
				if r.ko.Spec.TargetParameters.BatchJobParameters.RetryStrategy.Attempts != nil {
					f10f0f6.SetAttempts(*r.ko.Spec.TargetParameters.BatchJobParameters.RetryStrategy.Attempts)
				}
				f10f0.SetRetryStrategy(f10f0f6)
			}
			f10.SetBatchJobParameters(f10f0)
		}
		if r.ko.Spec.TargetParameters.CloudWatchLogsParameters != nil {
			f10f1 := &svcsdk.PipeTargetCloudWatchLogsParameters{}
			if r.ko.Spec.TargetParameters.CloudWatchLogsParameters.LogStreamName != nil {
				f10f1.SetLogStreamName(*r.ko.Spec.TargetParameters.CloudWatchLogsParameters.LogStreamName)
			}
			if r.ko.Spec.TargetParameters.CloudWatchLogsParameters.Timestamp != nil {
				f10f1.SetTimestamp(*r.ko.Spec.TargetParameters.CloudWatchLogsParameters.Timestamp)
			}
			f10.SetCloudWatchLogsParameters(f10f1)
		}
		if r.ko.Spec.TargetParameters.ECSTaskParameters != nil {
			f10f2 := &svcsdk.PipeTargetEcsTaskParameters{}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.CapacityProviderStrategy != nil {
				f10f2f0 := []*svcsdk.CapacityProviderStrategyItem{}
				for _, f10f2f0iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.CapacityProviderStrategy {
					f10f2f0elem := &svcsdk.CapacityProviderStrategyItem{}
					if f10f2f0iter.Base != nil {
						f10f2f0elem.SetBase(*f10f2f0iter.Base)
					}
					if f10f2f0iter.CapacityProvider != nil {
						f10f2f0elem.SetCapacityProvider(*f10f2f0iter.CapacityProvider)
					}
					if f10f2f0iter.Weight != nil {
						f10f2f0elem.SetWeight(*f10f2f0iter.Weight)
					}
					f10f2f0 = append(f10f2f0, f10f2f0elem)
				}
				f10f2.SetCapacityProviderStrategy(f10f2f0)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.EnableECSManagedTags != nil {
				f10f2.SetEnableECSManagedTags(*r.ko.Spec.TargetParameters.ECSTaskParameters.EnableECSManagedTags)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.EnableExecuteCommand != nil {
				f10f2.SetEnableExecuteCommand(*r.ko.Spec.TargetParameters.ECSTaskParameters.EnableExecuteCommand)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.Group != nil {
				f10f2.SetGroup(*r.ko.Spec.TargetParameters.ECSTaskParameters.Group)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.LaunchType != nil {
				f10f2.SetLaunchType(*r.ko.Spec.TargetParameters.ECSTaskParameters.LaunchType)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration != nil {
				f10f2f5 := &svcsdk.NetworkConfiguration{}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration != nil {
					f10f2f5f0 := &svcsdk.AwsVpcConfiguration{}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP != nil {
						f10f2f5f0.SetAssignPublicIp(*r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP)
					}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups != nil {
						f10f2f5f0f1 := []*string{}
						for _, f10f2f5f0f1iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups {
							var f10f2f5f0f1elem string
							f10f2f5f0f1elem = *f10f2f5f0f1iter
							f10f2f5f0f1 = append(f10f2f5f0f1, &f10f2f5f0f1elem)
						}
						f10f2f5f0.SetSecurityGroups(f10f2f5f0f1)
					}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.Subnets != nil {
						f10f2f5f0f2 := []*string{}
						for _, f10f2f5f0f2iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.Subnets {
							var f10f2f5f0f2elem string
							f10f2f5f0f2elem = *f10f2f5f0f2iter
							f10f2f5f0f2 = append(f10f2f5f0f2, &f10f2f5f0f2elem)
						}
						f10f2f5f0.SetSubnets(f10f2f5f0f2)
					}
					f10f2f5.SetAwsvpcConfiguration(f10f2f5f0)
				}
				f10f2.SetNetworkConfiguration(f10f2f5)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides != nil {
				f10f2f6 := &svcsdk.EcsTaskOverride{}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ContainerOverrides != nil {
					f10f2f6f0 := []*svcsdk.EcsContainerOverride{}
					for _, f10f2f6f0iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ContainerOverrides {
						f10f2f6f0elem := &svcsdk.EcsContainerOverride{}
						if f10f2f6f0iter.Command != nil {
							f10f2f6f0elemf0 := []*string{}
							for _, f10f2f6f0elemf0iter := range f10f2f6f0iter.Command {
								var f10f2f6f0elemf0elem string
								f10f2f6f0elemf0elem = *f10f2f6f0elemf0iter
								f10f2f6f0elemf0 = append(f10f2f6f0elemf0, &f10f2f6f0elemf0elem)
							}
							f10f2f6f0elem.SetCommand(f10f2f6f0elemf0)
						}
						if f10f2f6f0iter.CPU != nil {
							f10f2f6f0elem.SetCpu(*f10f2f6f0iter.CPU)
						}
						if f10f2f6f0iter.Environment != nil {
							f10f2f6f0elemf2 := []*svcsdk.EcsEnvironmentVariable{}
							for _, f10f2f6f0elemf2iter := range f10f2f6f0iter.Environment {
								f10f2f6f0elemf2elem := &svcsdk.EcsEnvironmentVariable{}
								if f10f2f6f0elemf2iter.Name != nil {
									f10f2f6f0elemf2elem.SetName(*f10f2f6f0elemf2iter.Name)
								}
								if f10f2f6f0elemf2iter.Value != nil {
									f10f2f6f0elemf2elem.SetValue(*f10f2f6f0elemf2iter.Value)
								}
								f10f2f6f0elemf2 = append(f10f2f6f0elemf2, f10f2f6f0elemf2elem)
							}
							f10f2f6f0elem.SetEnvironment(f10f2f6f0elemf2)
						}
						if f10f2f6f0iter.EnvironmentFiles != nil {
							f10f2f6f0elemf3 := []*svcsdk.EcsEnvironmentFile{}
							for _, f10f2f6f0elemf3iter := range f10f2f6f0iter.EnvironmentFiles {
								f10f2f6f0elemf3elem := &svcsdk.EcsEnvironmentFile{}
								if f10f2f6f0elemf3iter.Type != nil {
									f10f2f6f0elemf3elem.SetType(*f10f2f6f0elemf3iter.Type)
								}
								if f10f2f6f0elemf3iter.Value != nil {
									f10f2f6f0elemf3elem.SetValue(*f10f2f6f0elemf3iter.Value)
								}
								f10f2f6f0elemf3 = append(f10f2f6f0elemf3, f10f2f6f0elemf3elem)
							}
							f10f2f6f0elem.SetEnvironmentFiles(f10f2f6f0elemf3)
						}
						if f10f2f6f0iter.Memory != nil {
							f10f2f6f0elem.SetMemory(*f10f2f6f0iter.Memory)
						}
						if f10f2f6f0iter.MemoryReservation != nil {
							f10f2f6f0elem.SetMemoryReservation(*f10f2f6f0iter.MemoryReservation)
						}
						if f10f2f6f0iter.Name != nil {
							f10f2f6f0elem.SetName(*f10f2f6f0iter.Name)
						}
						if f10f2f6f0iter.ResourceRequirements != nil {
							f10f2f6f0elemf7 := []*svcsdk.EcsResourceRequirement{}
							for _, f10f2f6f0elemf7iter := range f10f2f6f0iter.ResourceRequirements {
								f10f2f6f0elemf7elem := &svcsdk.EcsResourceRequirement{}
								if f10f2f6f0elemf7iter.Type != nil {
									f10f2f6f0elemf7elem.SetType(*f10f2f6f0elemf7iter.Type)
								}
								if f10f2f6f0elemf7iter.Value != nil {
									f10f2f6f0elemf7elem.SetValue(*f10f2f6f0elemf7iter.Value)
								}
								f10f2f6f0elemf7 = append(f10f2f6f0elemf7, f10f2f6f0elemf7elem)
							}
							f10f2f6f0elem.SetResourceRequirements(f10f2f6f0elemf7)
						}
						f10f2f6f0 = append(f10f2f6f0, f10f2f6f0elem)
					}
					f10f2f6.SetContainerOverrides(f10f2f6f0)
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.CPU != nil {
					f10f2f6.SetCpu(*r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.CPU)
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.EphemeralStorage != nil {
					f10f2f6f2 := &svcsdk.EcsEphemeralStorage{}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.EphemeralStorage.SizeInGiB != nil {
						f10f2f6f2.SetSizeInGiB(*r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.EphemeralStorage.SizeInGiB)
					}
					f10f2f6.SetEphemeralStorage(f10f2f6f2)
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ExecutionRoleARN != nil {
					f10f2f6.SetExecutionRoleArn(*r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ExecutionRoleARN)
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.InferenceAcceleratorOverrides != nil {
					f10f2f6f4 := []*svcsdk.EcsInferenceAcceleratorOverride{}
					for _, f10f2f6f4iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.InferenceAcceleratorOverrides {
						f10f2f6f4elem := &svcsdk.EcsInferenceAcceleratorOverride{}
						if f10f2f6f4iter.DeviceName != nil {
							f10f2f6f4elem.SetDeviceName(*f10f2f6f4iter.DeviceName)
						}
						if f10f2f6f4iter.DeviceType != nil {
							f10f2f6f4elem.SetDeviceType(*f10f2f6f4iter.DeviceType)
						}
						f10f2f6f4 = append(f10f2f6f4, f10f2f6f4elem)
					}
					f10f2f6.SetInferenceAcceleratorOverrides(f10f2f6f4)
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.Memory != nil {
					f10f2f6.SetMemory(*r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.Memory)
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.TaskRoleARN != nil {
					f10f2f6.SetTaskRoleArn(*r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.TaskRoleARN)
				}
				f10f2.SetOverrides(f10f2f6)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementConstraints != nil {
				f10f2f7 := []*svcsdk.PlacementConstraint{}
				for _, f10f2f7iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementConstraints {
					f10f2f7elem := &svcsdk.PlacementConstraint{}
					if f10f2f7iter.Expression != nil {
						f10f2f7elem.SetExpression(*f10f2f7iter.Expression)
					}
					if f10f2f7iter.Type != nil {
						f10f2f7elem.SetType(*f10f2f7iter.Type)
					}
					f10f2f7 = append(f10f2f7, f10f2f7elem)
				}
				f10f2.SetPlacementConstraints(f10f2f7)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementStrategy != nil {
				f10f2f8 := []*svcsdk.PlacementStrategy{}
				for _, f10f2f8iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementStrategy {
					f10f2f8elem := &svcsdk.PlacementStrategy{}
					if f10f2f8iter.Field != nil {
						f10f2f8elem.SetField(*f10f2f8iter.Field)
					}
					if f10f2f8iter.Type != nil {
						f10f2f8elem.SetType(*f10f2f8iter.Type)
					}
					f10f2f8 = append(f10f2f8, f10f2f8elem)
				}
				f10f2.SetPlacementStrategy(f10f2f8)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PlatformVersion != nil {
				f10f2.SetPlatformVersion(*r.ko.Spec.TargetParameters.ECSTaskParameters.PlatformVersion)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PropagateTags != nil {
				f10f2.SetPropagateTags(*r.ko.Spec.TargetParameters.ECSTaskParameters.PropagateTags)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.ReferenceID != nil {
				f10f2.SetReferenceId(*r.ko.Spec.TargetParameters.ECSTaskParameters.ReferenceID)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.Tags != nil {
				f10f2f12 := []*svcsdk.Tag{}
				for _, f10f2f12iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.Tags {
					f10f2f12elem := &svcsdk.Tag{}
					if f10f2f12iter.Key != nil {
						f10f2f12elem.SetKey(*f10f2f12iter.Key)
					}
					if f10f2f12iter.Value != nil {
						f10f2f12elem.SetValue(*f10f2f12iter.Value)
					}
					f10f2f12 = append(f10f2f12, f10f2f12elem)
				}
				f10f2.SetTags(f10f2f12)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.TaskCount != nil {
				f10f2.SetTaskCount(*r.ko.Spec.TargetParameters.ECSTaskParameters.TaskCount)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.TaskDefinitionARN != nil {
				f10f2.SetTaskDefinitionArn(*r.ko.Spec.TargetParameters.ECSTaskParameters.TaskDefinitionARN)
			}
			f10.SetEcsTaskParameters(f10f2)
		}
		if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters != nil {
			f10f3 := &svcsdk.PipeTargetEventBridgeEventBusParameters{}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.DetailType != nil {
				f10f3.SetDetailType(*r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.DetailType)
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.EndpointID != nil {
				f10f3.SetEndpointId(*r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.EndpointID)
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Resources != nil {
				f10f3f2 := []*string{}
				for _, f10f3f2iter := range r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Resources {
					var f10f3f2elem string
					f10f3f2elem = *f10f3f2iter
					f10f3f2 = append(f10f3f2, &f10f3f2elem)
				}
				f10f3.SetResources(f10f3f2)
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Source != nil {
				f10f3.SetSource(*r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Source)
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Time != nil {
				f10f3.SetTime(*r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Time)
			}
			f10.SetEventBridgeEventBusParameters(f10f3)
		}
		if r.ko.Spec.TargetParameters.HTTPParameters != nil {
			f10f4 := &svcsdk.PipeTargetHttpParameters{}
			if r.ko.Spec.TargetParameters.HTTPParameters.HeaderParameters != nil {
				f10f4f0 := map[string]*string{}
				for f10f4f0key, f10f4f0valiter := range r.ko.Spec.TargetParameters.HTTPParameters.HeaderParameters {
					var f10f4f0val string
					f10f4f0val = *f10f4f0valiter
					f10f4f0[f10f4f0key] = &f10f4f0val
				}
				f10f4.SetHeaderParameters(f10f4f0)
			}
			if r.ko.Spec.TargetParameters.HTTPParameters.PathParameterValues != nil {
				f10f4f1 := []*string{}
				for _, f10f4f1iter := range r.ko.Spec.TargetParameters.HTTPParameters.PathParameterValues {
					var f10f4f1elem string
					f10f4f1elem = *f10f4f1iter
					f10f4f1 = append(f10f4f1, &f10f4f1elem)
				}
				f10f4.SetPathParameterValues(f10f4f1)
			}
			if r.ko.Spec.TargetParameters.HTTPParameters.QueryStringParameters != nil {
				f10f4f2 := map[string]*string{}
				for f10f4f2key, f10f4f2valiter := range r.ko.Spec.TargetParameters.HTTPParameters.QueryStringParameters {
					var f10f4f2val string
					f10f4f2val = *f10f4f2valiter
					f10f4f2[f10f4f2key] = &f10f4f2val
				}
				f10f4.SetQueryStringParameters(f10f4f2)
			}
			f10.SetHttpParameters(f10f4)
		}
		if r.ko.Spec.TargetParameters.InputTemplate != nil {
			f10.SetInputTemplate(*r.ko.Spec.TargetParameters.InputTemplate)
		}
		if r.ko.Spec.TargetParameters.KinesisStreamParameters != nil {
			f10f6 := &svcsdk.PipeTargetKinesisStreamParameters{}
			if r.ko.Spec.TargetParameters.KinesisStreamParameters.PartitionKey != nil {
				f10f6.SetPartitionKey(*r.ko.Spec.TargetParameters.KinesisStreamParameters.PartitionKey)
			}
			f10.SetKinesisStreamParameters(f10f6)
		}
		if r.ko.Spec.TargetParameters.LambdaFunctionParameters != nil {
			f10f7 := &svcsdk.PipeTargetLambdaFunctionParameters{}
			if r.ko.Spec.TargetParameters.LambdaFunctionParameters.InvocationType != nil {
				f10f7.SetInvocationType(*r.ko.Spec.TargetParameters.LambdaFunctionParameters.InvocationType)
			}
			f10.SetLambdaFunctionParameters(f10f7)
		}
		if r.ko.Spec.TargetParameters.RedshiftDataParameters != nil {
			f10f8 := &svcsdk.PipeTargetRedshiftDataParameters{}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.Database != nil {
				f10f8.SetDatabase(*r.ko.Spec.TargetParameters.RedshiftDataParameters.Database)
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.DBUser != nil {
				f10f8.SetDbUser(*r.ko.Spec.TargetParameters.RedshiftDataParameters.DBUser)
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.SecretManagerARN != nil {
				f10f8.SetSecretManagerArn(*r.ko.Spec.TargetParameters.RedshiftDataParameters.SecretManagerARN)
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.SQLs != nil {
				f10f8f3 := []*string{}
				for _, f10f8f3iter := range r.ko.Spec.TargetParameters.RedshiftDataParameters.SQLs {
					var f10f8f3elem string
					f10f8f3elem = *f10f8f3iter
					f10f8f3 = append(f10f8f3, &f10f8f3elem)
				}
				f10f8.SetSqls(f10f8f3)
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.StatementName != nil {
				f10f8.SetStatementName(*r.ko.Spec.TargetParameters.RedshiftDataParameters.StatementName)
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.WithEvent != nil {
				f10f8.SetWithEvent(*r.ko.Spec.TargetParameters.RedshiftDataParameters.WithEvent)
			}
			f10.SetRedshiftDataParameters(f10f8)
		}
		if r.ko.Spec.TargetParameters.SageMakerPipelineParameters != nil {
			f10f9 := &svcsdk.PipeTargetSageMakerPipelineParameters{}
			if r.ko.Spec.TargetParameters.SageMakerPipelineParameters.PipelineParameterList != nil {
				f10f9f0 := []*svcsdk.SageMakerPipelineParameter{}
				for _, f10f9f0iter := range r.ko.Spec.TargetParameters.SageMakerPipelineParameters.PipelineParameterList {
					f10f9f0elem := &svcsdk.SageMakerPipelineParameter{}
					if f10f9f0iter.Name != nil {
						f10f9f0elem.SetName(*f10f9f0iter.Name)
					}
					if f10f9f0iter.Value != nil {
						f10f9f0elem.SetValue(*f10f9f0iter.Value)
					}
					f10f9f0 = append(f10f9f0, f10f9f0elem)
				}
				f10f9.SetPipelineParameterList(f10f9f0)
			}
			f10.SetSageMakerPipelineParameters(f10f9)
		}
		if r.ko.Spec.TargetParameters.SQSQueueParameters != nil {
			f10f10 := &svcsdk.PipeTargetSqsQueueParameters{}
			if r.ko.Spec.TargetParameters.SQSQueueParameters.MessageDeduplicationID != nil {
				f10f10.SetMessageDeduplicationId(*r.ko.Spec.TargetParameters.SQSQueueParameters.MessageDeduplicationID)
			}
			if r.ko.Spec.TargetParameters.SQSQueueParameters.MessageGroupID != nil {
				f10f10.SetMessageGroupId(*r.ko.Spec.TargetParameters.SQSQueueParameters.MessageGroupID)
			}
			f10.SetSqsQueueParameters(f10f10)
		}
		if r.ko.Spec.TargetParameters.StepFunctionStateMachineParameters != nil {
			f10f11 := &svcsdk.PipeTargetStateMachineParameters{}
			if r.ko.Spec.TargetParameters.StepFunctionStateMachineParameters.InvocationType != nil {
				f10f11.SetInvocationType(*r.ko.Spec.TargetParameters.StepFunctionStateMachineParameters.InvocationType)
			}
			f10.SetStepFunctionStateMachineParameters(f10f11)
		}
		res.SetTargetParameters(f10)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if pipeInMutatingState(latest) {
		return latest, requeueWaitWhileUpdating
	}

	// hack (continued from delta.go): if there is only a difference in the current
	// and desired state (expressed through non-existing Spec field CurrentState,
	// continuously requeue so we don't block changes to the resources to recover
	// from a FAILED state
	if !delta.DifferentExcept("Spec.CurrentState") {
		return latest, requeueWaitWhileUpdating
	}

	if delta.DifferentAt("Spec.Tags") {
		err = rm.updatePipeTags(ctx, latest, desired)
		if err != nil {
			return nil, err
		}
	}

	// If no other differences were observe, avoid making UpdatePipe API calls.
	if !delta.DifferentExcept("Spec.Tags") {
		return desired, nil
	}
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	// we need to explicitly unset nil spec values
	unsetRemovedSpecFields(delta, desired.ko.Spec, input)

	var resp *svcsdk.UpdatePipeOutput
	_ = resp
	resp, err = rm.sdkapi.UpdatePipeWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdatePipe", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	// always requeue with desired state and return immediately due to eventually
	// consistent API
	return desired, ackrequeue.NeededAfter(nil, defaultRequeueDelay)

	// TODO (@embano1): we can't tell code-gen to not generate the rest of the code

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.CreationTime != nil {
		ko.Status.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		ko.Status.CreationTime = nil
	}
	if resp.CurrentState != nil {
		ko.Status.CurrentState = resp.CurrentState
	} else {
		ko.Status.CurrentState = nil
	}
	if resp.DesiredState != nil {
		ko.Spec.DesiredState = resp.DesiredState
	} else {
		ko.Spec.DesiredState = nil
	}
	if resp.LastModifiedTime != nil {
		ko.Status.LastModifiedTime = &metav1.Time{*resp.LastModifiedTime}
	} else {
		ko.Status.LastModifiedTime = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdatePipeInput, error) {
	res := &svcsdk.UpdatePipeInput{}

	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.DesiredState != nil {
		res.SetDesiredState(*r.ko.Spec.DesiredState)
	}
	if r.ko.Spec.Enrichment != nil {
		res.SetEnrichment(*r.ko.Spec.Enrichment)
	}
	if r.ko.Spec.EnrichmentParameters != nil {
		f3 := &svcsdk.PipeEnrichmentParameters{}
		if r.ko.Spec.EnrichmentParameters.HTTPParameters != nil {
			f3f0 := &svcsdk.PipeEnrichmentHttpParameters{}
			if r.ko.Spec.EnrichmentParameters.HTTPParameters.HeaderParameters != nil {
				f3f0f0 := map[string]*string{}
				for f3f0f0key, f3f0f0valiter := range r.ko.Spec.EnrichmentParameters.HTTPParameters.HeaderParameters {
					var f3f0f0val string
					f3f0f0val = *f3f0f0valiter
					f3f0f0[f3f0f0key] = &f3f0f0val
				}
				f3f0.SetHeaderParameters(f3f0f0)
			}
			if r.ko.Spec.EnrichmentParameters.HTTPParameters.PathParameterValues != nil {
				f3f0f1 := []*string{}
				for _, f3f0f1iter := range r.ko.Spec.EnrichmentParameters.HTTPParameters.PathParameterValues {
					var f3f0f1elem string
					f3f0f1elem = *f3f0f1iter
					f3f0f1 = append(f3f0f1, &f3f0f1elem)
				}
				f3f0.SetPathParameterValues(f3f0f1)
			}
			if r.ko.Spec.EnrichmentParameters.HTTPParameters.QueryStringParameters != nil {
				f3f0f2 := map[string]*string{}
				for f3f0f2key, f3f0f2valiter := range r.ko.Spec.EnrichmentParameters.HTTPParameters.QueryStringParameters {
					var f3f0f2val string
					f3f0f2val = *f3f0f2valiter
					f3f0f2[f3f0f2key] = &f3f0f2val
				}
				f3f0.SetQueryStringParameters(f3f0f2)
			}
			f3.SetHttpParameters(f3f0)
		}
		if r.ko.Spec.EnrichmentParameters.InputTemplate != nil {
			f3.SetInputTemplate(*r.ko.Spec.EnrichmentParameters.InputTemplate)
		}
		res.SetEnrichmentParameters(f3)
	}
	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.RoleARN != nil {
		res.SetRoleArn(*r.ko.Spec.RoleARN)
	}
	if r.ko.Spec.SourceParameters != nil {
		f6 := &svcsdk.UpdatePipeSourceParameters{}
		if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters != nil {
			f6f0 := &svcsdk.UpdatePipeSourceActiveMQBrokerParameters{}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.BatchSize != nil {
				f6f0.SetBatchSize(*r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.Credentials != nil {
				f6f0f1 := &svcsdk.MQBrokerAccessCredentials{}
				if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.Credentials.BasicAuth != nil {
					f6f0f1.SetBasicAuth(*r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.Credentials.BasicAuth)
				}
				f6f0.SetCredentials(f6f0f1)
			}
			if r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.MaximumBatchingWindowInSeconds != nil {
				f6f0.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.ActiveMQBrokerParameters.MaximumBatchingWindowInSeconds)
			}
			f6.SetActiveMQBrokerParameters(f6f0)
		}
		if r.ko.Spec.SourceParameters.DynamoDBStreamParameters != nil {
			f6f1 := &svcsdk.UpdatePipeSourceDynamoDBStreamParameters{}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.BatchSize != nil {
				f6f1.SetBatchSize(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig != nil {
				f6f1f1 := &svcsdk.DeadLetterConfig{}
				if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig.ARN != nil {
					f6f1f1.SetArn(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.DeadLetterConfig.ARN)
				}
				f6f1.SetDeadLetterConfig(f6f1f1)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumBatchingWindowInSeconds != nil {
				f6f1.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumBatchingWindowInSeconds)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRecordAgeInSeconds != nil {
				f6f1.SetMaximumRecordAgeInSeconds(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRecordAgeInSeconds)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRetryAttempts != nil {
				f6f1.SetMaximumRetryAttempts(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.MaximumRetryAttempts)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.OnPartialBatchItemFailure != nil {
				f6f1.SetOnPartialBatchItemFailure(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.OnPartialBatchItemFailure)
			}
			if r.ko.Spec.SourceParameters.DynamoDBStreamParameters.ParallelizationFactor != nil {
				f6f1.SetParallelizationFactor(*r.ko.Spec.SourceParameters.DynamoDBStreamParameters.ParallelizationFactor)
			}
			f6.SetDynamoDBStreamParameters(f6f1)
		}
		if r.ko.Spec.SourceParameters.FilterCriteria != nil {
			f6f2 := &svcsdk.FilterCriteria{}
			if r.ko.Spec.SourceParameters.FilterCriteria.Filters != nil {
				f6f2f0 := []*svcsdk.Filter{}
				for _, f6f2f0iter := range r.ko.Spec.SourceParameters.FilterCriteria.Filters {
					f6f2f0elem := &svcsdk.Filter{}
					if f6f2f0iter.Pattern != nil {
						f6f2f0elem.SetPattern(*f6f2f0iter.Pattern)
					}
					f6f2f0 = append(f6f2f0, f6f2f0elem)
				}
				f6f2.SetFilters(f6f2f0)
			}
			f6.SetFilterCriteria(f6f2)
		}
		if r.ko.Spec.SourceParameters.KinesisStreamParameters != nil {
			f6f3 := &svcsdk.UpdatePipeSourceKinesisStreamParameters{}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.BatchSize != nil {
				f6f3.SetBatchSize(*r.ko.Spec.SourceParameters.KinesisStreamParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.DeadLetterConfig != nil {
				f6f3f1 := &svcsdk.DeadLetterConfig{}
				if r.ko.Spec.SourceParameters.KinesisStreamParameters.DeadLetterConfig.ARN != nil {
					f6f3f1.SetArn(*r.ko.Spec.SourceParameters.KinesisStreamParameters.DeadLetterConfig.ARN)
				}
				f6f3.SetDeadLetterConfig(f6f3f1)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumBatchingWindowInSeconds != nil {
				f6f3.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumBatchingWindowInSeconds)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRecordAgeInSeconds != nil {
				f6f3.SetMaximumRecordAgeInSeconds(*r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRecordAgeInSeconds)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRetryAttempts != nil {
				f6f3.SetMaximumRetryAttempts(*r.ko.Spec.SourceParameters.KinesisStreamParameters.MaximumRetryAttempts)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.OnPartialBatchItemFailure != nil {
				f6f3.SetOnPartialBatchItemFailure(*r.ko.Spec.SourceParameters.KinesisStreamParameters.OnPartialBatchItemFailure)
			}
			if r.ko.Spec.SourceParameters.KinesisStreamParameters.ParallelizationFactor != nil {
				f6f3.SetParallelizationFactor(*r.ko.Spec.SourceParameters.KinesisStreamParameters.ParallelizationFactor)
			}
			f6.SetKinesisStreamParameters(f6f3)
		}
		if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters != nil {
			f6f4 := &svcsdk.UpdatePipeSourceManagedStreamingKafkaParameters{}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.BatchSize != nil {
				f6f4.SetBatchSize(*r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials != nil {
				f6f4f1 := &svcsdk.MSKAccessCredentials{}
				if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.ClientCertificateTLSAuth != nil {
					f6f4f1.SetClientCertificateTlsAuth(*r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.ClientCertificateTLSAuth)
				}
				if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.SASLSCRAM512Auth != nil {
					f6f4f1.SetSaslScram512Auth(*r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.Credentials.SASLSCRAM512Auth)
				}
				f6f4.SetCredentials(f6f4f1)
			}
			if r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.MaximumBatchingWindowInSeconds != nil {
				f6f4.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.ManagedStreamingKafkaParameters.MaximumBatchingWindowInSeconds)
			}
			f6.SetManagedStreamingKafkaParameters(f6f4)
		}
		if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters != nil {
			f6f5 := &svcsdk.UpdatePipeSourceRabbitMQBrokerParameters{}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.BatchSize != nil {
				f6f5.SetBatchSize(*r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.Credentials != nil {
				f6f5f1 := &svcsdk.MQBrokerAccessCredentials{}
				if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.Credentials.BasicAuth != nil {
					f6f5f1.SetBasicAuth(*r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.Credentials.BasicAuth)
				}
				f6f5.SetCredentials(f6f5f1)
			}
			if r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.MaximumBatchingWindowInSeconds != nil {
				f6f5.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.RabbitMQBrokerParameters.MaximumBatchingWindowInSeconds)
			}
			f6.SetRabbitMQBrokerParameters(f6f5)
		}
		if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters != nil {
			f6f6 := &svcsdk.UpdatePipeSourceSelfManagedKafkaParameters{}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.BatchSize != nil {
				f6f6.SetBatchSize(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials != nil {
				f6f6f1 := &svcsdk.SelfManagedKafkaAccessConfigurationCredentials{}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.BasicAuth != nil {
					f6f6f1.SetBasicAuth(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.BasicAuth)
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.ClientCertificateTLSAuth != nil {
					f6f6f1.SetClientCertificateTlsAuth(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.ClientCertificateTLSAuth)
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM256Auth != nil {
					f6f6f1.SetSaslScram256Auth(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM256Auth)
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM512Auth != nil {
					f6f6f1.SetSaslScram512Auth(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.Credentials.SASLSCRAM512Auth)
				}
				f6f6.SetCredentials(f6f6f1)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.MaximumBatchingWindowInSeconds != nil {
				f6f6.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.MaximumBatchingWindowInSeconds)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.ServerRootCaCertificate != nil {
				f6f6.SetServerRootCaCertificate(*r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.ServerRootCaCertificate)
			}
			if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC != nil {
				f6f6f4 := &svcsdk.SelfManagedKafkaAccessConfigurationVpc{}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.SecurityGroup != nil {
					f6f6f4f0 := []*string{}
					for _, f6f6f4f0iter := range r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.SecurityGroup {
						var f6f6f4f0elem string
						f6f6f4f0elem = *f6f6f4f0iter
						f6f6f4f0 = append(f6f6f4f0, &f6f6f4f0elem)
					}
					f6f6f4.SetSecurityGroup(f6f6f4f0)
				}
				if r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.Subnets != nil {
					f6f6f4f1 := []*string{}
					for _, f6f6f4f1iter := range r.ko.Spec.SourceParameters.SelfManagedKafkaParameters.VPC.Subnets {
						var f6f6f4f1elem string
						f6f6f4f1elem = *f6f6f4f1iter
						f6f6f4f1 = append(f6f6f4f1, &f6f6f4f1elem)
					}
					f6f6f4.SetSubnets(f6f6f4f1)
				}
				f6f6.SetVpc(f6f6f4)
			}
			f6.SetSelfManagedKafkaParameters(f6f6)
		}
		if r.ko.Spec.SourceParameters.SQSQueueParameters != nil {
			f6f7 := &svcsdk.UpdatePipeSourceSqsQueueParameters{}
			if r.ko.Spec.SourceParameters.SQSQueueParameters.BatchSize != nil {
				f6f7.SetBatchSize(*r.ko.Spec.SourceParameters.SQSQueueParameters.BatchSize)
			}
			if r.ko.Spec.SourceParameters.SQSQueueParameters.MaximumBatchingWindowInSeconds != nil {
				f6f7.SetMaximumBatchingWindowInSeconds(*r.ko.Spec.SourceParameters.SQSQueueParameters.MaximumBatchingWindowInSeconds)
			}
			f6.SetSqsQueueParameters(f6f7)
		}
		res.SetSourceParameters(f6)
	}
	if r.ko.Spec.Target != nil {
		res.SetTarget(*r.ko.Spec.Target)
	}
	if r.ko.Spec.TargetParameters != nil {
		f8 := &svcsdk.PipeTargetParameters{}
		if r.ko.Spec.TargetParameters.BatchJobParameters != nil {
			f8f0 := &svcsdk.PipeTargetBatchJobParameters{}
			if r.ko.Spec.TargetParameters.BatchJobParameters.ArrayProperties != nil {
				f8f0f0 := &svcsdk.BatchArrayProperties{}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ArrayProperties.Size != nil {
					f8f0f0.SetSize(*r.ko.Spec.TargetParameters.BatchJobParameters.ArrayProperties.Size)
				}
				f8f0.SetArrayProperties(f8f0f0)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides != nil {
				f8f0f1 := &svcsdk.BatchContainerOverrides{}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Command != nil {
					f8f0f1f0 := []*string{}
					for _, f8f0f1f0iter := range r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Command {
						var f8f0f1f0elem string
						f8f0f1f0elem = *f8f0f1f0iter
						f8f0f1f0 = append(f8f0f1f0, &f8f0f1f0elem)
					}
					f8f0f1.SetCommand(f8f0f1f0)
				}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Environment != nil {
					f8f0f1f1 := []*svcsdk.BatchEnvironmentVariable{}
					for _, f8f0f1f1iter := range r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.Environment {
						f8f0f1f1elem := &svcsdk.BatchEnvironmentVariable{}
						if f8f0f1f1iter.Name != nil {
							f8f0f1f1elem.SetName(*f8f0f1f1iter.Name)
						}
						if f8f0f1f1iter.Value != nil {
							f8f0f1f1elem.SetValue(*f8f0f1f1iter.Value)
						}
						f8f0f1f1 = append(f8f0f1f1, f8f0f1f1elem)
					}
					f8f0f1.SetEnvironment(f8f0f1f1)
				}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.InstanceType != nil {
					f8f0f1.SetInstanceType(*r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.InstanceType)
				}
				if r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.ResourceRequirements != nil {
					f8f0f1f3 := []*svcsdk.BatchResourceRequirement{}
					for _, f8f0f1f3iter := range r.ko.Spec.TargetParameters.BatchJobParameters.ContainerOverrides.ResourceRequirements {
						f8f0f1f3elem := &svcsdk.BatchResourceRequirement{}
						if f8f0f1f3iter.Type != nil {
							f8f0f1f3elem.SetType(*f8f0f1f3iter.Type)
						}
						if f8f0f1f3iter.Value != nil {
							f8f0f1f3elem.SetValue(*f8f0f1f3iter.Value)
						}
						f8f0f1f3 = append(f8f0f1f3, f8f0f1f3elem)
					}
					f8f0f1.SetResourceRequirements(f8f0f1f3)
				}
				f8f0.SetContainerOverrides(f8f0f1)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.DependsOn != nil {
				f8f0f2 := []*svcsdk.BatchJobDependency{}
				for _, f8f0f2iter := range r.ko.Spec.TargetParameters.BatchJobParameters.DependsOn {
					f8f0f2elem := &svcsdk.BatchJobDependency{}
					if f8f0f2iter.JobID != nil {
						f8f0f2elem.SetJobId(*f8f0f2iter.JobID)
					}
					if f8f0f2iter.Type != nil {
						f8f0f2elem.SetType(*f8f0f2iter.Type)
					}
					f8f0f2 = append(f8f0f2, f8f0f2elem)
				}
				f8f0.SetDependsOn(f8f0f2)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.JobDefinition != nil {
				f8f0.SetJobDefinition(*r.ko.Spec.TargetParameters.BatchJobParameters.JobDefinition)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.JobName != nil {
				f8f0.SetJobName(*r.ko.Spec.TargetParameters.BatchJobParameters.JobName)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.Parameters != nil {
				f8f0f5 := map[string]*string{}
				for f8f0f5key, f8f0f5valiter := range r.ko.Spec.TargetParameters.BatchJobParameters.Parameters {
					var f8f0f5val string
					f8f0f5val = *f8f0f5valiter
					f8f0f5[f8f0f5key] = &f8f0f5val
				}
				f8f0.SetParameters(f8f0f5)
			}
			if r.ko.Spec.TargetParameters.BatchJobParameters.RetryStrategy != nil {
				f8f0f6 := &svcsdk.BatchRetryStrategy{}
				if r.ko.Spec.TargetParameters.BatchJobParameters.RetryStrategy.Attempts != nil {
					f8f0f6.SetAttempts(*r.ko.Spec.TargetParameters.BatchJobParameters.RetryStrategy.Attempts)
				}
				f8f0.SetRetryStrategy(f8f0f6)
			}
			f8.SetBatchJobParameters(f8f0)
		}
		if r.ko.Spec.TargetParameters.CloudWatchLogsParameters != nil {
			f8f1 := &svcsdk.PipeTargetCloudWatchLogsParameters{}
			if r.ko.Spec.TargetParameters.CloudWatchLogsParameters.LogStreamName != nil {
				f8f1.SetLogStreamName(*r.ko.Spec.TargetParameters.CloudWatchLogsParameters.LogStreamName)
			}
			if r.ko.Spec.TargetParameters.CloudWatchLogsParameters.Timestamp != nil {
				f8f1.SetTimestamp(*r.ko.Spec.TargetParameters.CloudWatchLogsParameters.Timestamp)
			}
			f8.SetCloudWatchLogsParameters(f8f1)
		}
		if r.ko.Spec.TargetParameters.ECSTaskParameters != nil {
			f8f2 := &svcsdk.PipeTargetEcsTaskParameters{}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.CapacityProviderStrategy != nil {
				f8f2f0 := []*svcsdk.CapacityProviderStrategyItem{}
				for _, f8f2f0iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.CapacityProviderStrategy {
					f8f2f0elem := &svcsdk.CapacityProviderStrategyItem{}
					if f8f2f0iter.Base != nil {
						f8f2f0elem.SetBase(*f8f2f0iter.Base)
					}
					if f8f2f0iter.CapacityProvider != nil {
						f8f2f0elem.SetCapacityProvider(*f8f2f0iter.CapacityProvider)
					}
					if f8f2f0iter.Weight != nil {
						f8f2f0elem.SetWeight(*f8f2f0iter.Weight)
					}
					f8f2f0 = append(f8f2f0, f8f2f0elem)
				}
				f8f2.SetCapacityProviderStrategy(f8f2f0)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.EnableECSManagedTags != nil {
				f8f2.SetEnableECSManagedTags(*r.ko.Spec.TargetParameters.ECSTaskParameters.EnableECSManagedTags)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.EnableExecuteCommand != nil {
				f8f2.SetEnableExecuteCommand(*r.ko.Spec.TargetParameters.ECSTaskParameters.EnableExecuteCommand)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.Group != nil {
				f8f2.SetGroup(*r.ko.Spec.TargetParameters.ECSTaskParameters.Group)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.LaunchType != nil {
				f8f2.SetLaunchType(*r.ko.Spec.TargetParameters.ECSTaskParameters.LaunchType)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration != nil {
				f8f2f5 := &svcsdk.NetworkConfiguration{}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration != nil {
					f8f2f5f0 := &svcsdk.AwsVpcConfiguration{}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP != nil {
						f8f2f5f0.SetAssignPublicIp(*r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.AssignPublicIP)
					}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups != nil {
						f8f2f5f0f1 := []*string{}
						for _, f8f2f5f0f1iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.SecurityGroups {
							var f8f2f5f0f1elem string
							f8f2f5f0f1elem = *f8f2f5f0f1iter
							f8f2f5f0f1 = append(f8f2f5f0f1, &f8f2f5f0f1elem)
						}
						f8f2f5f0.SetSecurityGroups(f8f2f5f0f1)
					}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.Subnets != nil {
						f8f2f5f0f2 := []*string{}
						for _, f8f2f5f0f2iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.NetworkConfiguration.AWSVPCConfiguration.Subnets {
							var f8f2f5f0f2elem string
							f8f2f5f0f2elem = *f8f2f5f0f2iter
							f8f2f5f0f2 = append(f8f2f5f0f2, &f8f2f5f0f2elem)
						}
						f8f2f5f0.SetSubnets(f8f2f5f0f2)
					}
					f8f2f5.SetAwsvpcConfiguration(f8f2f5f0)
				}
				f8f2.SetNetworkConfiguration(f8f2f5)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides != nil {
				f8f2f6 := &svcsdk.EcsTaskOverride{}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ContainerOverrides != nil {
					f8f2f6f0 := []*svcsdk.EcsContainerOverride{}
					for _, f8f2f6f0iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ContainerOverrides {
						f8f2f6f0elem := &svcsdk.EcsContainerOverride{}
						if f8f2f6f0iter.Command != nil {
							f8f2f6f0elemf0 := []*string{}
							for _, f8f2f6f0elemf0iter := range f8f2f6f0iter.Command {
								var f8f2f6f0elemf0elem string
								f8f2f6f0elemf0elem = *f8f2f6f0elemf0iter
								f8f2f6f0elemf0 = append(f8f2f6f0elemf0, &f8f2f6f0elemf0elem)
							}
							f8f2f6f0elem.SetCommand(f8f2f6f0elemf0)
						}
						if f8f2f6f0iter.CPU != nil {
							f8f2f6f0elem.SetCpu(*f8f2f6f0iter.CPU)
						}
						if f8f2f6f0iter.Environment != nil {
							f8f2f6f0elemf2 := []*svcsdk.EcsEnvironmentVariable{}
							for _, f8f2f6f0elemf2iter := range f8f2f6f0iter.Environment {
								f8f2f6f0elemf2elem := &svcsdk.EcsEnvironmentVariable{}
								if f8f2f6f0elemf2iter.Name != nil {
									f8f2f6f0elemf2elem.SetName(*f8f2f6f0elemf2iter.Name)
								}
								if f8f2f6f0elemf2iter.Value != nil {
									f8f2f6f0elemf2elem.SetValue(*f8f2f6f0elemf2iter.Value)
								}
								f8f2f6f0elemf2 = append(f8f2f6f0elemf2, f8f2f6f0elemf2elem)
							}
							f8f2f6f0elem.SetEnvironment(f8f2f6f0elemf2)
						}
						if f8f2f6f0iter.EnvironmentFiles != nil {
							f8f2f6f0elemf3 := []*svcsdk.EcsEnvironmentFile{}
							for _, f8f2f6f0elemf3iter := range f8f2f6f0iter.EnvironmentFiles {
								f8f2f6f0elemf3elem := &svcsdk.EcsEnvironmentFile{}
								if f8f2f6f0elemf3iter.Type != nil {
									f8f2f6f0elemf3elem.SetType(*f8f2f6f0elemf3iter.Type)
								}
								if f8f2f6f0elemf3iter.Value != nil {
									f8f2f6f0elemf3elem.SetValue(*f8f2f6f0elemf3iter.Value)
								}
								f8f2f6f0elemf3 = append(f8f2f6f0elemf3, f8f2f6f0elemf3elem)
							}
							f8f2f6f0elem.SetEnvironmentFiles(f8f2f6f0elemf3)
						}
						if f8f2f6f0iter.Memory != nil {
							f8f2f6f0elem.SetMemory(*f8f2f6f0iter.Memory)
						}
						if f8f2f6f0iter.MemoryReservation != nil {
							f8f2f6f0elem.SetMemoryReservation(*f8f2f6f0iter.MemoryReservation)
						}
						if f8f2f6f0iter.Name != nil {
							f8f2f6f0elem.SetName(*f8f2f6f0iter.Name)
						}
						if f8f2f6f0iter.ResourceRequirements != nil {
							f8f2f6f0elemf7 := []*svcsdk.EcsResourceRequirement{}
							for _, f8f2f6f0elemf7iter := range f8f2f6f0iter.ResourceRequirements {
								f8f2f6f0elemf7elem := &svcsdk.EcsResourceRequirement{}
								if f8f2f6f0elemf7iter.Type != nil {
									f8f2f6f0elemf7elem.SetType(*f8f2f6f0elemf7iter.Type)
								}
								if f8f2f6f0elemf7iter.Value != nil {
									f8f2f6f0elemf7elem.SetValue(*f8f2f6f0elemf7iter.Value)
								}
								f8f2f6f0elemf7 = append(f8f2f6f0elemf7, f8f2f6f0elemf7elem)
							}
							f8f2f6f0elem.SetResourceRequirements(f8f2f6f0elemf7)
						}
						f8f2f6f0 = append(f8f2f6f0, f8f2f6f0elem)
					}
					f8f2f6.SetContainerOverrides(f8f2f6f0)
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.CPU != nil {
					f8f2f6.SetCpu(*r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.CPU)
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.EphemeralStorage != nil {
					f8f2f6f2 := &svcsdk.EcsEphemeralStorage{}
					if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.EphemeralStorage.SizeInGiB != nil {
						f8f2f6f2.SetSizeInGiB(*r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.EphemeralStorage.SizeInGiB)
					}
					f8f2f6.SetEphemeralStorage(f8f2f6f2)
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ExecutionRoleARN != nil {
					f8f2f6.SetExecutionRoleArn(*r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.ExecutionRoleARN)
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.InferenceAcceleratorOverrides != nil {
					f8f2f6f4 := []*svcsdk.EcsInferenceAcceleratorOverride{}
					for _, f8f2f6f4iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.InferenceAcceleratorOverrides {
						f8f2f6f4elem := &svcsdk.EcsInferenceAcceleratorOverride{}
						if f8f2f6f4iter.DeviceName != nil {
							f8f2f6f4elem.SetDeviceName(*f8f2f6f4iter.DeviceName)
						}
						if f8f2f6f4iter.DeviceType != nil {
							f8f2f6f4elem.SetDeviceType(*f8f2f6f4iter.DeviceType)
						}
						f8f2f6f4 = append(f8f2f6f4, f8f2f6f4elem)
					}
					f8f2f6.SetInferenceAcceleratorOverrides(f8f2f6f4)
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.Memory != nil {
					f8f2f6.SetMemory(*r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.Memory)
				}
				if r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.TaskRoleARN != nil {
					f8f2f6.SetTaskRoleArn(*r.ko.Spec.TargetParameters.ECSTaskParameters.Overrides.TaskRoleARN)
				}
				f8f2.SetOverrides(f8f2f6)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementConstraints != nil {
				f8f2f7 := []*svcsdk.PlacementConstraint{}
				for _, f8f2f7iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementConstraints {
					f8f2f7elem := &svcsdk.PlacementConstraint{}
					if f8f2f7iter.Expression != nil {
						f8f2f7elem.SetExpression(*f8f2f7iter.Expression)
					}
					if f8f2f7iter.Type != nil {
						f8f2f7elem.SetType(*f8f2f7iter.Type)
					}
					f8f2f7 = append(f8f2f7, f8f2f7elem)
				}
				f8f2.SetPlacementConstraints(f8f2f7)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementStrategy != nil {
				f8f2f8 := []*svcsdk.PlacementStrategy{}
				for _, f8f2f8iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.PlacementStrategy {
					f8f2f8elem := &svcsdk.PlacementStrategy{}
					if f8f2f8iter.Field != nil {
						f8f2f8elem.SetField(*f8f2f8iter.Field)
					}
					if f8f2f8iter.Type != nil {
						f8f2f8elem.SetType(*f8f2f8iter.Type)
					}
					f8f2f8 = append(f8f2f8, f8f2f8elem)
				}
				f8f2.SetPlacementStrategy(f8f2f8)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PlatformVersion != nil {
				f8f2.SetPlatformVersion(*r.ko.Spec.TargetParameters.ECSTaskParameters.PlatformVersion)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.PropagateTags != nil {
				f8f2.SetPropagateTags(*r.ko.Spec.TargetParameters.ECSTaskParameters.PropagateTags)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.ReferenceID != nil {
				f8f2.SetReferenceId(*r.ko.Spec.TargetParameters.ECSTaskParameters.ReferenceID)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.Tags != nil {
				f8f2f12 := []*svcsdk.Tag{}
				for _, f8f2f12iter := range r.ko.Spec.TargetParameters.ECSTaskParameters.Tags {
					f8f2f12elem := &svcsdk.Tag{}
					if f8f2f12iter.Key != nil {
						f8f2f12elem.SetKey(*f8f2f12iter.Key)
					}
					if f8f2f12iter.Value != nil {
						f8f2f12elem.SetValue(*f8f2f12iter.Value)
					}
					f8f2f12 = append(f8f2f12, f8f2f12elem)
				}
				f8f2.SetTags(f8f2f12)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.TaskCount != nil {
				f8f2.SetTaskCount(*r.ko.Spec.TargetParameters.ECSTaskParameters.TaskCount)
			}
			if r.ko.Spec.TargetParameters.ECSTaskParameters.TaskDefinitionARN != nil {
				f8f2.SetTaskDefinitionArn(*r.ko.Spec.TargetParameters.ECSTaskParameters.TaskDefinitionARN)
			}
			f8.SetEcsTaskParameters(f8f2)
		}
		if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters != nil {
			f8f3 := &svcsdk.PipeTargetEventBridgeEventBusParameters{}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.DetailType != nil {
				f8f3.SetDetailType(*r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.DetailType)
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.EndpointID != nil {
				f8f3.SetEndpointId(*r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.EndpointID)
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Resources != nil {
				f8f3f2 := []*string{}
				for _, f8f3f2iter := range r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Resources {
					var f8f3f2elem string
					f8f3f2elem = *f8f3f2iter
					f8f3f2 = append(f8f3f2, &f8f3f2elem)
				}
				f8f3.SetResources(f8f3f2)
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Source != nil {
				f8f3.SetSource(*r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Source)
			}
			if r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Time != nil {
				f8f3.SetTime(*r.ko.Spec.TargetParameters.EventBridgeEventBusParameters.Time)
			}
			f8.SetEventBridgeEventBusParameters(f8f3)
		}
		if r.ko.Spec.TargetParameters.HTTPParameters != nil {
			f8f4 := &svcsdk.PipeTargetHttpParameters{}
			if r.ko.Spec.TargetParameters.HTTPParameters.HeaderParameters != nil {
				f8f4f0 := map[string]*string{}
				for f8f4f0key, f8f4f0valiter := range r.ko.Spec.TargetParameters.HTTPParameters.HeaderParameters {
					var f8f4f0val string
					f8f4f0val = *f8f4f0valiter
					f8f4f0[f8f4f0key] = &f8f4f0val
				}
				f8f4.SetHeaderParameters(f8f4f0)
			}
			if r.ko.Spec.TargetParameters.HTTPParameters.PathParameterValues != nil {
				f8f4f1 := []*string{}
				for _, f8f4f1iter := range r.ko.Spec.TargetParameters.HTTPParameters.PathParameterValues {
					var f8f4f1elem string
					f8f4f1elem = *f8f4f1iter
					f8f4f1 = append(f8f4f1, &f8f4f1elem)
				}
				f8f4.SetPathParameterValues(f8f4f1)
			}
			if r.ko.Spec.TargetParameters.HTTPParameters.QueryStringParameters != nil {
				f8f4f2 := map[string]*string{}
				for f8f4f2key, f8f4f2valiter := range r.ko.Spec.TargetParameters.HTTPParameters.QueryStringParameters {
					var f8f4f2val string
					f8f4f2val = *f8f4f2valiter
					f8f4f2[f8f4f2key] = &f8f4f2val
				}
				f8f4.SetQueryStringParameters(f8f4f2)
			}
			f8.SetHttpParameters(f8f4)
		}
		if r.ko.Spec.TargetParameters.InputTemplate != nil {
			f8.SetInputTemplate(*r.ko.Spec.TargetParameters.InputTemplate)
		}
		if r.ko.Spec.TargetParameters.KinesisStreamParameters != nil {
			f8f6 := &svcsdk.PipeTargetKinesisStreamParameters{}
			if r.ko.Spec.TargetParameters.KinesisStreamParameters.PartitionKey != nil {
				f8f6.SetPartitionKey(*r.ko.Spec.TargetParameters.KinesisStreamParameters.PartitionKey)
			}
			f8.SetKinesisStreamParameters(f8f6)
		}
		if r.ko.Spec.TargetParameters.LambdaFunctionParameters != nil {
			f8f7 := &svcsdk.PipeTargetLambdaFunctionParameters{}
			if r.ko.Spec.TargetParameters.LambdaFunctionParameters.InvocationType != nil {
				f8f7.SetInvocationType(*r.ko.Spec.TargetParameters.LambdaFunctionParameters.InvocationType)
			}
			f8.SetLambdaFunctionParameters(f8f7)
		}
		if r.ko.Spec.TargetParameters.RedshiftDataParameters != nil {
			f8f8 := &svcsdk.PipeTargetRedshiftDataParameters{}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.Database != nil {
				f8f8.SetDatabase(*r.ko.Spec.TargetParameters.RedshiftDataParameters.Database)
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.DBUser != nil {
				f8f8.SetDbUser(*r.ko.Spec.TargetParameters.RedshiftDataParameters.DBUser)
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.SecretManagerARN != nil {
				f8f8.SetSecretManagerArn(*r.ko.Spec.TargetParameters.RedshiftDataParameters.SecretManagerARN)
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.SQLs != nil {
				f8f8f3 := []*string{}
				for _, f8f8f3iter := range r.ko.Spec.TargetParameters.RedshiftDataParameters.SQLs {
					var f8f8f3elem string
					f8f8f3elem = *f8f8f3iter
					f8f8f3 = append(f8f8f3, &f8f8f3elem)
				}
				f8f8.SetSqls(f8f8f3)
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.StatementName != nil {
				f8f8.SetStatementName(*r.ko.Spec.TargetParameters.RedshiftDataParameters.StatementName)
			}
			if r.ko.Spec.TargetParameters.RedshiftDataParameters.WithEvent != nil {
				f8f8.SetWithEvent(*r.ko.Spec.TargetParameters.RedshiftDataParameters.WithEvent)
			}
			f8.SetRedshiftDataParameters(f8f8)
		}
		if r.ko.Spec.TargetParameters.SageMakerPipelineParameters != nil {
			f8f9 := &svcsdk.PipeTargetSageMakerPipelineParameters{}
			if r.ko.Spec.TargetParameters.SageMakerPipelineParameters.PipelineParameterList != nil {
				f8f9f0 := []*svcsdk.SageMakerPipelineParameter{}
				for _, f8f9f0iter := range r.ko.Spec.TargetParameters.SageMakerPipelineParameters.PipelineParameterList {
					f8f9f0elem := &svcsdk.SageMakerPipelineParameter{}
					if f8f9f0iter.Name != nil {
						f8f9f0elem.SetName(*f8f9f0iter.Name)
					}
					if f8f9f0iter.Value != nil {
						f8f9f0elem.SetValue(*f8f9f0iter.Value)
					}
					f8f9f0 = append(f8f9f0, f8f9f0elem)
				}
				f8f9.SetPipelineParameterList(f8f9f0)
			}
			f8.SetSageMakerPipelineParameters(f8f9)
		}
		if r.ko.Spec.TargetParameters.SQSQueueParameters != nil {
			f8f10 := &svcsdk.PipeTargetSqsQueueParameters{}
			if r.ko.Spec.TargetParameters.SQSQueueParameters.MessageDeduplicationID != nil {
				f8f10.SetMessageDeduplicationId(*r.ko.Spec.TargetParameters.SQSQueueParameters.MessageDeduplicationID)
			}
			if r.ko.Spec.TargetParameters.SQSQueueParameters.MessageGroupID != nil {
				f8f10.SetMessageGroupId(*r.ko.Spec.TargetParameters.SQSQueueParameters.MessageGroupID)
			}
			f8.SetSqsQueueParameters(f8f10)
		}
		if r.ko.Spec.TargetParameters.StepFunctionStateMachineParameters != nil {
			f8f11 := &svcsdk.PipeTargetStateMachineParameters{}
			if r.ko.Spec.TargetParameters.StepFunctionStateMachineParameters.InvocationType != nil {
				f8f11.SetInvocationType(*r.ko.Spec.TargetParameters.StepFunctionStateMachineParameters.InvocationType)
			}
			f8.SetStepFunctionStateMachineParameters(f8f11)
		}
		res.SetTargetParameters(f8)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeletePipeOutput
	_ = resp
	resp, err = rm.sdkapi.DeletePipeWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeletePipe", err)
	// always requeue if API call succeeded due to eventually consistent state
	// transitions
	if err == nil {
		return r, requeueWaitWhileDeleting
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeletePipeInput, error) {
	res := &svcsdk.DeletePipeInput{}

	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Pipe,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ValidationException":
		return true
	default:
		return false
	}
}
